{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# DawsOS Corporate Website\n\n## Overview\n\nDawsOS is an enterprise risk management platform that serves as a \"Propagation OS\" - a system for analyzing causal shock chains in risk scenarios. The platform provides transparent, calibrated, and replayable risk analysis with full explainability, targeting risk managers, portfolio analysts, economists, and policy analysts. The application features real-time SLO monitoring, interactive causal path exploration, and sector-specific risk pattern libraries.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React SPA**: Built with React 18 using TypeScript for type safety\n- **Routing**: Client-side routing implemented with Wouter for lightweight navigation\n- **UI Framework**: Radix UI primitives with shadcn/ui components for consistent design system\n- **Styling**: Tailwind CSS with custom CSS variables for brand colors (signal-teal, electric-blue, provenance-purple, alert-amber)\n- **State Management**: TanStack Query (React Query) for server state management and API caching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Build System**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API server\n- **Language**: TypeScript with ES modules\n- **API Structure**: RESTful endpoints for demo requests and contact messages\n- **Error Handling**: Centralized error middleware with structured error responses\n- **Development**: Hot module replacement and automatic restarts using tsx\n\n### Data Storage Solutions\n- **Database**: PostgreSQL configured through Drizzle ORM\n- **ORM**: Drizzle ORM with type-safe schema definitions and migrations\n- **Connection**: Uses @neondatabase/serverless for database connectivity\n- **Schema**: Separate schema file in shared directory for type consistency between client and server\n- **Validation**: Zod schemas for runtime validation matching database schema\n- **Fallback Storage**: In-memory storage implementation for development/testing\n\n### Authentication and Authorization\n- **Current State**: No authentication system implemented\n- **Data Access**: Public API endpoints for demo requests and contact forms\n- **Session Management**: Express session infrastructure prepared but not actively used\n\n### Component Architecture\n- **Design System**: Comprehensive UI component library based on Radix UI primitives\n- **Responsive Design**: Mobile-first approach with responsive navigation and layouts\n- **Interactive Components**: Custom components for causal path demos, SLO dashboards, and risk visualizations\n- **Modular Structure**: Reusable components organized in ui/ directory with specific business components in components/\n\n### Development Workflow\n- **Type Safety**: Shared TypeScript types between client and server\n- **Path Aliases**: Configured path mapping for clean imports (@/, @shared/, @assets/)\n- **Development Tools**: Runtime error overlay and development banners for Replit environment\n- **Build Process**: Separate client and server build processes with optimized bundling\n\n## External Dependencies\n\n### Database and ORM\n- **Drizzle Kit**: Database schema management and migrations\n- **Drizzle ORM**: Type-safe database queries and schema definitions\n- **@neondatabase/serverless**: PostgreSQL connection for serverless environments\n- **connect-pg-simple**: PostgreSQL session store (prepared for future use)\n\n### UI and Styling\n- **Radix UI**: Complete primitive component library for accessible UI components\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Framer Motion**: Animation library for interactive components\n- **Lucide React**: Icon library for consistent iconography\n\n### Development and Build Tools\n- **Vite**: Build tool and development server with HMR\n- **TypeScript**: Type system for both client and server code\n- **ESBuild**: Fast JavaScript bundler for server-side code\n- **PostCSS**: CSS processing with Tailwind and autoprefixer\n\n### Form Handling and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Runtime type validation and schema parsing\n- **@hookform/resolvers**: Integration between React Hook Form and Zod\n\n### State Management and API\n- **TanStack Query**: Server state management with caching and synchronization\n- **Wouter**: Lightweight client-side routing\n- **Date-fns**: Date manipulation utilities\n\n### Replit Integration\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Development tooling\n- **@replit/vite-plugin-dev-banner**: Development environment indicators","size_bytes":4742},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // DawsOS Brand Colors\n        graphite: \"var(--graphite)\",\n        slate: \"var(--slate)\",\n        \"signal-teal\": \"var(--signal-teal)\",\n        \"electric-blue\": \"var(--electric-blue)\",\n        \"provenance-purple\": \"var(--provenance-purple)\",\n        \"alert-amber\": \"var(--alert-amber)\",\n        \"risk-red\": \"var(--risk-red)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-gentle\": {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.7\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-gentle\": \"pulse-gentle 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3278},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      // Security: Never log response bodies (may contain PII like emails, names)\n      log(`${req.method} ${path} ${res.statusCode} in ${duration}ms`);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1664},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertDemoRequestSchema, insertContactMessageSchema, insertProductSchema, insertPurchaseSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Demo request endpoint\n  app.post(\"/api/demo-requests\", async (req, res) => {\n    try {\n      const validatedData = insertDemoRequestSchema.parse(req.body);\n      const demoRequest = await storage.createDemoRequest(validatedData);\n      res.json({ success: true, id: demoRequest.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Failed to create demo request\" \n        });\n      }\n    }\n  });\n\n  // Get demo requests (for admin purposes)\n  app.get(\"/api/demo-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getDemoRequests();\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to retrieve demo requests\" \n      });\n    }\n  });\n\n  // Contact message endpoint\n  app.post(\"/api/contact-messages\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      res.json({ success: true, id: message.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Failed to create contact message\" \n        });\n      }\n    }\n  });\n\n  // Get contact messages (for admin purposes)\n  app.get(\"/api/contact-messages\", async (req, res) => {\n    try {\n      const messages = await storage.getContactMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to retrieve contact messages\" \n      });\n    }\n  });\n\n  // Retail product endpoints\n  // Get all products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      // Parse features back to array for frontend consumption\n      const parsedProducts = products.map(product => ({\n        ...product,\n        features: JSON.parse(product.features as string)\n      }));\n      res.json(parsedProducts);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to retrieve products\" \n      });\n    }\n  });\n\n  // Get product by slug\n  app.get(\"/api/products/:slug\", async (req, res) => {\n    try {\n      const product = await storage.getProductBySlug(req.params.slug);\n      if (!product) {\n        return res.status(404).json({ \n          success: false, \n          message: \"Product not found\" \n        });\n      }\n      // Parse features back to array\n      const parsedProduct = {\n        ...product,\n        features: JSON.parse(product.features as string)\n      };\n      res.json(parsedProduct);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to retrieve product\" \n      });\n    }\n  });\n\n  // Create purchase (mock endpoint for now without Stripe)\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const validatedData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(validatedData);\n      res.json({ \n        success: true, \n        id: purchase.id,\n        message: \"Purchase created successfully\" \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Failed to create purchase\" \n        });\n      }\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4364},"server/storage.ts":{"content":"import { type User, type InsertUser, type DemoRequest, type InsertDemoRequest, type ContactMessage, type InsertContactMessage, type Product, type InsertProduct, type Purchase, type InsertPurchase, type Download, type Subscription } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createDemoRequest(demoRequest: InsertDemoRequest): Promise<DemoRequest>;\n  getDemoRequests(): Promise<DemoRequest[]>;\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n  \n  // Retail product operations\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductBySlug(slug: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getPurchasesByUser(userId: string): Promise<Purchase[]>;\n  getUserDownloads(userId: string): Promise<Download[]>;\n  getUserSubscriptions(userId: string): Promise<Subscription[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private demoRequests: Map<string, DemoRequest>;\n  private contactMessages: Map<string, ContactMessage>;\n  private products: Map<string, Product>;\n  private purchases: Map<string, Purchase>;\n  private downloads: Map<string, Download>;\n  private subscriptions: Map<string, Subscription>;\n\n  constructor() {\n    this.users = new Map();\n    this.demoRequests = new Map();\n    this.contactMessages = new Map();\n    this.products = new Map();\n    this.purchases = new Map();\n    this.downloads = new Map();\n    this.subscriptions = new Map();\n    this.initializeProducts();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createDemoRequest(insertDemoRequest: InsertDemoRequest): Promise<DemoRequest> {\n    const id = randomUUID();\n    const demoRequest: DemoRequest = {\n      ...insertDemoRequest,\n      id,\n      createdAt: new Date(),\n      sector: insertDemoRequest.sector || null,\n      urgency: insertDemoRequest.urgency || null,\n      sloRequirements: insertDemoRequest.sloRequirements || null,\n      useCase: insertDemoRequest.useCase || null,\n      newsletter: insertDemoRequest.newsletter || null,\n    };\n    this.demoRequests.set(id, demoRequest);\n    return demoRequest;\n  }\n\n  async getDemoRequests(): Promise<DemoRequest[]> {\n    return Array.from(this.demoRequests.values());\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = {\n      ...insertMessage,\n      id,\n      createdAt: new Date(),\n      message: insertMessage.message || null,\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values());\n  }\n\n  // Retail product methods\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getProductBySlug(slug: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(product => product.slug === slug);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      description: insertProduct.description || null,\n      isActive: insertProduct.isActive ?? true,\n      features: JSON.stringify(insertProduct.features),\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = randomUUID();\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      status: insertPurchase.status || 'pending',\n      createdAt: new Date(),\n      completedAt: null,\n      stripePaymentIntentId: null,\n    };\n    this.purchases.set(id, purchase);\n    return purchase;\n  }\n\n  async getPurchasesByUser(userId: string): Promise<Purchase[]> {\n    return Array.from(this.purchases.values()).filter(purchase => purchase.userId === userId);\n  }\n\n  async getUserDownloads(userId: string): Promise<Download[]> {\n    return Array.from(this.downloads.values()).filter(download => download.userId === userId);\n  }\n\n  async getUserSubscriptions(userId: string): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values()).filter(sub => sub.userId === userId);\n  }\n\n  private initializeProducts() {\n    // DawsOS Kit Products based on the content\n    const products: (Omit<Product, 'id' | 'createdAt'> & { features: string[] })[] = [\n      {\n        name: \"Build like DawsOS - Starter Kit\",\n        slug: \"dawsos-starter\",\n        description: \"Essential prompts, templates, and quickstart guide to get you building with the DawsOS method in 72 hours.\",\n        price: \"49.00\",\n        type: \"kit\",\n        tier: \"starter\",\n        features: [\n          \"System prompts & persona scripts for operating-constitution work\", \n          \"Core templates: event taxonomy, schema change playbook\",\n          \"72-hour Quickstart: from blank page to architecture draft\",\n          \"1 n8n automation: sale→fulfillment workflow\",\n          \"Downloadable ZIP with all templates\"\n        ],\n        isActive: true,\n      },\n      {\n        name: \"Build like DawsOS - Pro Kit\",\n        slug: \"dawsos-pro\",\n        description: \"Complete toolkit with videos, community access, and all automation workflows to scale your agent-first business.\",\n        price: \"199.00\",\n        type: \"kit\",\n        tier: \"pro\",\n        features: [\n          \"Everything in Starter Kit\",\n          \"Video walkthroughs and tutorials\",\n          \"6-month updates to all content\",\n          \"Discord community access\", \n          \"All 5 n8n agents: sale→fulfillment, KPI watchdog, content factory, affiliate engine, release pipeline\",\n          \"\\\"How to sell\\\" scripts and pricing matrices\",\n          \"Agent workflow scaffolds and SLO badge patterns\"\n        ],\n        isActive: true,\n      },\n      {\n        name: \"Build like DawsOS - Bundle + Workbench\",\n        slug: \"dawsos-bundle\",\n        description: \"Pro Kit plus 3 months of Agent Workbench subscription for exporting and running your flows.\",\n        price: \"299.00\",\n        type: \"kit\",\n        tier: \"bundle\",\n        features: [\n          \"Everything in Pro Kit\",\n          \"3 months Agent Workbench subscription\",\n          \"Export templates to runnable n8n flows\",\n          \"Generate GPT profiles and starter repos\", \n          \"Growing template library with one-click exporters\",\n          \"Build, export, and run your agent workflows\"\n        ],\n        isActive: true,\n      }\n    ];\n\n    products.forEach(productData => {\n      const id = randomUUID();\n      const product: Product = {\n        ...productData,\n        id,\n        description: productData.description || null,\n        isActive: productData.isActive ?? true,\n        features: JSON.stringify(productData.features),\n        createdAt: new Date(),\n      };\n      this.products.set(id, product);\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7869},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, jsonb, integer, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const demoRequests = pgTable(\"demo_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\").notNull(),\n  role: text(\"role\").notNull(),\n  sector: text(\"sector\"),\n  urgency: text(\"urgency\"),\n  sloRequirements: text(\"slo_requirements\"),\n  useCase: text(\"use_case\"),\n  newsletter: boolean(\"newsletter\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull(),\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertDemoRequestSchema = createInsertSchema(demoRequests).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  company: z.string().min(1, \"Company is required\"),\n  role: z.string().min(1, \"Role is required\"),\n  sector: z.string().optional(),\n  urgency: z.string().optional(),\n  sloRequirements: z.string().optional(),\n  useCase: z.string().optional(),\n  newsletter: z.boolean().default(false),\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  email: z.string().email(\"Valid email is required\"),\n  role: z.string().min(1, \"Role is required\"),\n  message: z.string().optional(),\n});\n\n// Retail product tables\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  type: text(\"type\").notNull(), // 'kit' or 'subscription'\n  tier: text(\"tier\").notNull(), // 'starter', 'pro', 'bundle'\n  features: jsonb(\"features\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const purchases = pgTable(\"purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default('pending'), // 'pending', 'completed', 'failed'\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  stripeSubscriptionId: text(\"stripe_subscription_id\").unique(),\n  status: text(\"status\").notNull(), // 'active', 'cancelled', 'past_due'\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const downloads = pgTable(\"downloads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  purchaseId: varchar(\"purchase_id\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  downloadUrl: text(\"download_url\").notNull(),\n  downloadCount: integer(\"download_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastDownloadedAt: timestamp(\"last_downloaded_at\"),\n});\n\n// Insert schemas for retail products\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  name: z.string().min(1, \"Product name is required\"),\n  slug: z.string().min(1, \"Product slug is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  type: z.enum([\"kit\", \"subscription\"]),\n  tier: z.enum([\"starter\", \"pro\", \"bundle\"]),\n  features: z.array(z.string()),\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n}).extend({\n  userId: z.string(),\n  productId: z.string(),\n  amount: z.string(),\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  userId: z.string(),\n  productId: z.string(),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type DemoRequest = typeof demoRequests.$inferSelect;\nexport type InsertDemoRequest = z.infer<typeof insertDemoRequestSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Purchase = typeof purchases.$inferSelect;\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Download = typeof downloads.$inferSelect;\n","size_bytes":5896},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Product from \"@/pages/product\";\nimport Solutions from \"@/pages/solutions\";\nimport Pricing from \"@/pages/pricing\";\nimport About from \"@/pages/about\";\nimport Careers from \"@/pages/careers\";\nimport Trust from \"@/pages/trust\";\nimport Contact from \"@/pages/contact\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/product\" component={Product} />\n          <Route path=\"/solutions\" component={Solutions} />\n          <Route path=\"/pricing\" component={Pricing} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/careers\" component={Careers} />\n          <Route path=\"/trust\" component={Trust} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    // Default title - individual pages can override\n    document.title = \"DawsOS - Decision Analytics & Warning System\";\n    \n    // Default meta description\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (!metaDescription) {\n      const meta = document.createElement('meta');\n      meta.name = 'description';\n      meta.content = 'Advanced decision analytics and early warning system for financial risk management, policy analysis, and strategic planning.';\n      document.head.appendChild(meta);\n    }\n    \n    // Open Graph tags\n    const addOpenGraphTag = (property: string, content: string) => {\n      const existing = document.querySelector(`meta[property=\"${property}\"]`);\n      if (!existing) {\n        const meta = document.createElement('meta');\n        meta.setAttribute('property', property);\n        meta.content = content;\n        document.head.appendChild(meta);\n      }\n    };\n    \n    addOpenGraphTag('og:title', 'DawsOS - Decision Analytics & Warning System');\n    addOpenGraphTag('og:description', 'Advanced decision analytics and early warning system for financial risk management, policy analysis, and strategic planning.');\n    addOpenGraphTag('og:type', 'website');\n    addOpenGraphTag('og:site_name', 'DawsOS');\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3065},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=IBM+Plex+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 13%, 9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(217, 12%, 15%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(217, 12%, 15%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(174, 100%, 32%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(217, 12%, 15%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(217, 12%, 18%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 78%, 56%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 75%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 12%, 18%);\n  --input: hsl(217, 12%, 15%);\n  --ring: hsl(174, 100%, 32%);\n  --chart-1: hsl(217, 78%, 56%);\n  --chart-2: hsl(174, 100%, 32%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(217, 12%, 15%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(174, 100%, 32%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(217, 12%, 18%);\n  --sidebar-accent-foreground: hsl(174, 100%, 32%);\n  --sidebar-border: hsl(217, 12%, 18%);\n  --sidebar-ring: hsl(174, 100%, 32%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-mono: 'IBM Plex Mono', Consolas, monospace;\n  --radius: 8px;\n\n  /* DawsOS Brand Colors */\n  --graphite: hsl(220, 13%, 9%);\n  --slate: hsl(217, 12%, 18%);\n  --signal-teal: hsl(180, 100%, 32%);\n  --electric-blue: hsl(217, 78%, 56%);\n  --provenance-purple: hsl(264, 67%, 48%);\n  --alert-amber: hsl(42, 100%, 55%);\n  --risk-red: hsl(0, 75%, 60%);\n}\n\n.dark {\n  --background: hsl(220, 13%, 9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(217, 12%, 15%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(217, 12%, 15%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(174, 100%, 32%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(217, 12%, 15%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(217, 12%, 18%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 78%, 56%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 75%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 12%, 18%);\n  --input: hsl(217, 12%, 15%);\n  --ring: hsl(174, 100%, 32%);\n  --sidebar: hsl(217, 12%, 15%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(174, 100%, 32%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(217, 12%, 18%);\n  --sidebar-accent-foreground: hsl(174, 100%, 32%);\n  --sidebar-border: hsl(217, 12%, 18%);\n  --sidebar-ring: hsl(174, 100%, 32%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background-color: var(--graphite);\n    color: var(--foreground);\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .gradient-border {\n    background: linear-gradient(90deg, var(--signal-teal), var(--electric-blue)) padding-box,\n                linear-gradient(90deg, var(--signal-teal), var(--electric-blue)) border-box;\n    border: 2px solid transparent;\n  }\n\n  .causal-path-demo {\n    background: linear-gradient(135deg, hsla(180, 100%, 32%, 0.05), hsla(217, 78%, 56%, 0.05));\n  }\n\n  .evidence-glow {\n    box-shadow: 0 0 20px hsla(180, 100%, 32%, 0.3);\n  }\n\n  .slo-indicator {\n    animation: pulse-gentle 3s ease-in-out infinite;\n  }\n\n  @keyframes pulse-gentle {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n\n  .snapshot-token {\n    font-family: var(--font-mono);\n    background: hsla(264, 67%, 48%, 0.1);\n    border: 1px solid hsla(264, 67%, 48%, 0.3);\n  }\n\n  .edge-legend {\n    border-left: 3px solid var(--signal-teal);\n  }\n\n  .calibration-badge {\n    background: linear-gradient(135deg, hsla(180, 100%, 32%, 0.2), hsla(217, 78%, 56%, 0.2));\n  }\n}\n\n@layer utilities {\n  .text-graphite {\n    color: var(--graphite);\n  }\n  \n  .text-slate {\n    color: var(--slate);\n  }\n  \n  .text-signal-teal {\n    color: var(--signal-teal);\n  }\n  \n  .text-electric-blue {\n    color: var(--electric-blue);\n  }\n  \n  .text-provenance-purple {\n    color: var(--provenance-purple);\n  }\n  \n  .text-alert-amber {\n    color: var(--alert-amber);\n  }\n  \n  .text-risk-red {\n    color: var(--risk-red);\n  }\n  \n  .bg-graphite {\n    background-color: var(--graphite);\n  }\n  \n  .bg-slate {\n    background-color: var(--slate);\n  }\n  \n  .bg-signal-teal {\n    background-color: var(--signal-teal);\n  }\n  \n  .bg-electric-blue {\n    background-color: var(--electric-blue);\n  }\n  \n  .bg-provenance-purple {\n    background-color: var(--provenance-purple);\n  }\n  \n  .bg-alert-amber {\n    background-color: var(--alert-amber);\n  }\n  \n  .bg-risk-red {\n    background-color: var(--risk-red);\n  }\n\n  .border-signal-teal {\n    border-color: var(--signal-teal);\n  }\n  \n  .border-electric-blue {\n    border-color: var(--electric-blue);\n  }\n  \n  .border-provenance-purple {\n    border-color: var(--provenance-purple);\n  }\n  \n  .border-alert-amber {\n    border-color: var(--alert-amber);\n  }\n  \n  .border-risk-red {\n    border-color: var(--risk-red);\n  }\n\n  .hover\\:bg-signal-teal\\/90:hover {\n    background-color: hsla(180, 100%, 32%, 0.9);\n  }\n  \n  .hover\\:bg-electric-blue\\/90:hover {\n    background-color: hsla(217, 78%, 56%, 0.9);\n  }\n\n  .bg-signal-teal\\/20 {\n    background-color: hsla(180, 100%, 32%, 0.2);\n  }\n  \n  .bg-electric-blue\\/20 {\n    background-color: hsla(217, 78%, 56%, 0.2);\n  }\n  \n  .bg-provenance-purple\\/20 {\n    background-color: hsla(264, 67%, 48%, 0.2);\n  }\n  \n  .bg-alert-amber\\/20 {\n    background-color: hsla(42, 100%, 55%, 0.2);\n  }\n  \n  .bg-risk-red\\/20 {\n    background-color: hsla(0, 75%, 60%, 0.2);\n  }\n}\n","size_bytes":5848},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/causal-path-demo.tsx":{"content":"import { ArrowRight, Search } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport EvidenceDrawer, { type EvidenceContext } from \"./evidence-drawer\";\n\nexport default function CausalPathDemo() {\n  const [hoveredStep, setHoveredStep] = useState<number | null>(null);\n  const [selectedStep, setSelectedStep] = useState<number | null>(null);\n  const [isEvidenceOpen, setIsEvidenceOpen] = useState(false);\n\n  // Sample evidence context for the demo\n  const evidenceContext: EvidenceContext = {\n    title: \"Rate Hike Impact Analysis\",\n    description: \"Fed rate increase flowing through commercial real estate markets\",\n    scenario: \"Rate Hike +0.5%\",\n    snapshotId: \"4f8a2b39\",\n    summary: \"When the Federal Reserve raises rates by 0.5%, this creates a cascading effect through commercial real estate markets. Variable-rate mortgages immediately reset to higher payments, creating payment stress for borrowers. This leads to increased arrears within 45 days, followed by legal action and foreclosure proceedings. The analysis shows 87% confidence in this chain based on 2008 and 2015 rate cycle patterns.\",\n    sources: [\n      {\n        id: \"fed-2024-01\",\n        title: \"Federal Open Market Committee Statement\",\n        source: \"Federal Reserve\",\n        url: \"https://www.federalreserve.gov/newsevents/pressreleases/monetary20240115a.htm\",\n        excerpt: \"The Committee decided to raise the target range for the federal funds rate to 5.25 to 5.50 percent to ensure that inflation returns sustainably to 2 percent over time.\",\n        date: \"2024-01-15\",\n        confidence: 0.95,\n        type: \"regulatory\"\n      },\n      {\n        id: \"bis-2023-study\",\n        title: \"Commercial Real Estate Risk in a Rising Rate Environment\",\n        source: \"Bank for International Settlements\",\n        url: \"https://www.bis.org/publ/qtrpdf/r_qt2309_research.pdf\",\n        excerpt: \"Variable-rate commercial mortgages show significant stress indicators when rates rise by 50 basis points or more, with payment delinquencies increasing by an average of 23% within 60 days.\",\n        date: \"2023-09-15\",\n        confidence: 0.89,\n        type: \"academic\"\n      },\n      {\n        id: \"cre-data-2015\",\n        title: \"Historical Analysis: 2015-2016 Rate Tightening Cycle\",\n        source: \"Commercial Mortgage Alert\",\n        url: \"https://www.cmalert.com/historical/2015-rate-cycle-analysis\",\n        excerpt: \"During the 2015 rate increases, commercial mortgage delinquency rates rose from 1.8% to 3.4% over six months, with legal actions following an average of 73 days after initial payment stress.\",\n        date: \"2015-12-18\",\n        confidence: 0.83,\n        type: \"historical\"\n      }\n    ]\n  };\n\n  const handleViewEvidence = () => {\n    setIsEvidenceOpen(true);\n  };\n\n  return (\n    <div className=\"causal-path-demo p-8 rounded-2xl border border-muted bg-card/50 hover:bg-card/80 transition-all cursor-pointer\">\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-semibold mb-2\">Interactive Causal Path</h3>\n          <div className=\"flex items-center justify-center gap-4 text-xs text-muted-foreground\">\n            <span className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-1 bg-signal-teal rounded-full\"></div>\n              Fact-based link\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-1 border border-electric-blue border-dashed rounded-full\"></div>\n              Pattern-derived\n            </span>\n          </div>\n        </div>\n        \n        {/* Causal Chain Visualization */}\n        <div className=\"space-y-4\">\n          <motion.div \n            className=\"flex items-center justify-between\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            onHoverStart={() => setHoveredStep(1)}\n            onHoverEnd={() => setHoveredStep(null)}\n            onClick={() => setSelectedStep(selectedStep === 1 ? null : 1)}\n          >\n            <div className={`bg-alert-amber/20 border rounded-lg p-3 flex-1 transition-all cursor-pointer ${\n              hoveredStep === 1 ? 'border-alert-amber bg-alert-amber/30 shadow-lg scale-102' : 'border-alert-amber'\n            } ${selectedStep === 1 ? 'ring-2 ring-alert-amber/50' : ''}`}>\n              <div className=\"font-mono text-sm text-alert-amber\">Event: Fed Rate Hike +0.5%</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">2024-01-15 14:30 UTC</div>\n              {selectedStep === 1 && (\n                <motion.div \n                  className=\"mt-2 p-2 bg-alert-amber/10 rounded text-xs\"\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: \"auto\" }}\n                >\n                  Source: Federal Reserve Press Release\n                </motion.div>\n              )}\n            </div>\n            <motion.div \n              className={`mx-4 transition-colors ${hoveredStep === 1 ? 'text-alert-amber' : 'text-signal-teal'}`}\n              animate={{ x: [0, 5, 0] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <ArrowRight className=\"w-5 h-5\" style={{\n                strokeDasharray: '5,3',\n                stroke: hoveredStep === 1 ? 'var(--alert-amber)' : 'var(--signal-teal)'\n              }} />\n            </motion.div>\n          </motion.div>\n\n          <motion.div \n            className=\"flex items-center justify-between\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n            onHoverStart={() => setHoveredStep(2)}\n            onHoverEnd={() => setHoveredStep(null)}\n            onClick={() => setSelectedStep(selectedStep === 2 ? null : 2)}\n          >\n            <div className={`bg-electric-blue/20 border rounded-lg p-3 flex-1 transition-all cursor-pointer ${\n              hoveredStep === 2 ? 'border-electric-blue bg-electric-blue/30 shadow-lg scale-102' : 'border-electric-blue'\n            } ${selectedStep === 2 ? 'ring-2 ring-electric-blue/50' : ''}`}>\n              <div className=\"font-mono text-sm text-electric-blue\">Chain: Credit Tightening</div>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground mt-1\">\n                <span>Confidence: 0.87 ± 0.03</span>\n                <div className=\"h-1 bg-electric-blue/30 rounded-full flex-1 overflow-hidden\">\n                  <div className=\"h-full bg-electric-blue w-[87%] rounded-full\"></div>\n                </div>\n              </div>\n              {selectedStep === 2 && (\n                <motion.div \n                  className=\"mt-2 p-2 bg-electric-blue/10 rounded text-xs\"\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: \"auto\" }}\n                >\n                  Pattern: 2008, 2015 rate cycles + econometric model\n                </motion.div>\n              )}\n            </div>\n            <motion.div \n              className={`mx-4 transition-colors ${hoveredStep === 2 ? 'text-electric-blue' : 'text-signal-teal'}`}\n              animate={{ x: [0, 5, 0] }}\n              transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n            >\n              <ArrowRight className=\"w-5 h-5\" />\n            </motion.div>\n          </motion.div>\n\n          <motion.div \n            className=\"flex items-center justify-between\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n            onHoverStart={() => setHoveredStep(3)}\n            onHoverEnd={() => setHoveredStep(null)}\n            onClick={() => setSelectedStep(selectedStep === 3 ? null : 3)}\n          >\n            <div className={`bg-risk-red/20 border rounded-lg p-3 flex-1 transition-all cursor-pointer ${\n              hoveredStep === 3 ? 'border-risk-red bg-risk-red/30 shadow-lg scale-102' : 'border-risk-red'\n            } ${selectedStep === 3 ? 'ring-2 ring-risk-red/50' : ''}`}>\n              <div className=\"font-mono text-sm text-risk-red\">Impact: Commercial Portfolio Risk</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Expected: $2.3M increase in defaults (-4.2%)</div>\n              {selectedStep === 3 && (\n                <motion.div \n                  className=\"mt-2 p-2 bg-risk-red/10 rounded text-xs\"\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: \"auto\" }}\n                >\n                  Risk Model: Variable-rate exposure stress test\n                </motion.div>\n              )}\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Evidence Button & Microcopy */}\n        <motion.div \n          className=\"text-center space-y-3\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.8 }}\n        >\n          <button \n            onClick={handleViewEvidence}\n            className=\"bg-signal-teal/20 hover:bg-signal-teal/30 border border-signal-teal text-signal-teal px-6 py-3 rounded-lg font-medium transition-all evidence-glow hover:scale-105\"\n            data-testid=\"button-view-evidence\"\n          >\n            <Search className=\"w-4 h-4 inline mr-2\" />\n            View Evidence (2 clicks)\n          </button>\n          \n          {/* Microcopy Tags */}\n          <div className=\"flex items-center justify-center gap-6 text-xs text-muted-foreground\">\n            <span className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-signal-teal rounded-full opacity-75\"></div>\n              Calibration: within Service Level Objectives\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-electric-blue rounded-full opacity-75\"></div>\n              Replay with snapshot ID: #4f8a2b\n            </span>\n          </div>\n        </motion.div>\n      </div>\n      \n      <EvidenceDrawer \n        isOpen={isEvidenceOpen}\n        onClose={() => setIsEvidenceOpen(false)}\n        context={evidenceContext}\n      />\n    </div>\n  );\n}\n","size_bytes":10322},"client/src/components/demo-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertDemoRequestSchema, type InsertDemoRequest } from \"@shared/schema\";\n\ninterface DemoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function DemoModal({ isOpen, onClose }: DemoModalProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<InsertDemoRequest>({\n    resolver: zodResolver(insertDemoRequestSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      company: \"\",\n      role: \"\",\n      sector: \"\",\n      urgency: \"\",\n      sloRequirements: \"\",\n      useCase: \"\",\n      newsletter: false,\n    },\n  });\n\n  const createDemoRequest = useMutation({\n    mutationFn: async (data: InsertDemoRequest) => {\n      return await apiRequest(\"POST\", \"/api/demo-requests\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demo Request Submitted\",\n        description: \"Our team will contact you within 24 hours.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/demo-requests\"] });\n      form.reset();\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit demo request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertDemoRequest) => {\n    createDemoRequest.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"bg-card border-muted max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">\n            <h3 className=\"text-xl font-semibold mb-2\">Book Your Demo</h3>\n            <p className=\"text-muted-foreground text-sm font-normal\">\n              See DawsOS in action with your specific use cases\n            </p>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field}\n                      placeholder=\"Full name\"\n                      className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                      data-testid=\"input-demo-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Work Email</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field}\n                      type=\"email\"\n                      placeholder=\"Work email\"\n                      className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                      data-testid=\"input-demo-email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"company\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Company</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field}\n                      placeholder=\"Company\"\n                      className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                      data-testid=\"input-demo-company\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Role</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger \n                        className=\"bg-background border-muted text-foreground focus:border-signal-teal\" \n                        data-testid=\"select-demo-role\"\n                      >\n                        <SelectValue placeholder=\"Select your role\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"risk-manager\">Risk Manager</SelectItem>\n                      <SelectItem value=\"portfolio-analyst\">Portfolio Analyst</SelectItem>\n                      <SelectItem value=\"policy-analyst\">Policy Analyst</SelectItem>\n                      <SelectItem value=\"economist\">Economist/Strategist</SelectItem>\n                      <SelectItem value=\"credit-officer\">Credit Officer</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3\">\n              <Button \n                type=\"button\" \n                onClick={onClose}\n                variant=\"outline\"\n                className=\"flex-1 border-muted text-muted-foreground hover:bg-muted/10\"\n                data-testid=\"button-demo-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={createDemoRequest.isPending}\n                className=\"flex-1 bg-signal-teal hover:bg-signal-teal/90 text-white\"\n                data-testid=\"button-demo-submit\"\n              >\n                {createDemoRequest.isPending ? \"Submitting...\" : \"Book Demo\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6778},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport dawsOSLogo from \"@assets/DawsOS Icon_1758107642436.png\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"py-12 bg-graphite border-t border-muted\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8\">\n                <img src={dawsOSLogo} alt=\"DawsOS\" className=\"w-8 h-8 object-contain\" />\n              </div>\n              <span className=\"text-xl font-semibold text-white\">DawsOS</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              Shows how shocks travel through markets—always with evidence you can share.\n            </p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Product</h3>\n            <div className=\"space-y-2\">\n              <Link \n                href=\"/product\"\n                className=\"block text-sm text-muted-foreground hover:text-white transition-colors\"\n                data-testid=\"footer-link-chain-inspector\"\n              >\n                Chain Inspector\n              </Link>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Risk Dashboard\n              </a>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Scenario Builder\n              </a>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Pattern Studio\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Solutions</h3>\n            <div className=\"space-y-2\">\n              <Link \n                href=\"/solutions\"\n                className=\"block text-sm text-muted-foreground hover:text-white transition-colors\"\n                data-testid=\"footer-link-banks\"\n              >\n                Banks\n              </Link>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Energy\n              </a>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Semiconductors\n              </a>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Enterprise\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Company</h3>\n            <div className=\"space-y-2\">\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                About\n              </a>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Careers\n              </a>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Blog\n              </a>\n              <a href=\"#\" className=\"block text-sm text-muted-foreground hover:text-white transition-colors\">\n                Documentation\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-muted mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-muted-foreground text-sm\">© 2024 DawsOS. All rights reserved.</p>\n          <div className=\"flex items-center space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-white transition-colors\">Privacy</a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-white transition-colors\">Terms</a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-white transition-colors\">Security</a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4057},"client/src/components/hero.tsx":{"content":"import { useState } from \"react\";\nimport CausalPathDemo from \"./causal-path-demo\";\nimport DemoModal from \"./demo-modal\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nexport default function Hero() {\n  const [isDemoModalOpen, setIsDemoModalOpen] = useState(false);\n  const [isCausalPathOpen, setIsCausalPathOpen] = useState(false);\n\n  const openSamplePath = () => {\n    setIsCausalPathOpen(true);\n  };\n\n  return (\n    <>\n      <section className=\"pt-24 pb-16 bg-gradient-to-br from-graphite to-slate\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <h1 className=\"text-5xl lg:text-6xl font-bold leading-tight\">\n                  From rate hikes to rent defaults — trace every <span className=\"text-signal-teal\">causal link</span>\n                </h1>\n                <p className=\"text-xl text-muted-foreground leading-relaxed\">\n                  Who's next, how fast, how sure — always with evidence you can defend. Works alongside Bloomberg, MSCI, and Aladdin.\n                </p>\n              </div>\n\n              {/* Proof Bar */}\n              <div className=\"flex flex-wrap gap-4\">\n                <div className=\"flex items-center space-x-2 bg-card px-4 py-2 rounded-lg\">\n                  <div className=\"w-2 h-2 bg-signal-teal rounded-full slo-indicator\"></div>\n                  <span className=\"text-sm\">Every answer shows its work</span>\n                </div>\n                <div className=\"flex items-center space-x-2 bg-card px-4 py-2 rounded-lg\">\n                  <div className=\"w-2 h-2 bg-electric-blue rounded-full slo-indicator\"></div>\n                  <span className=\"text-sm\">Calibrated confidence scores</span>\n                </div>\n                <div className=\"flex items-center space-x-2 bg-card px-4 py-2 rounded-lg\">\n                  <div className=\"w-2 h-2 bg-provenance-purple rounded-full slo-indicator\"></div>\n                  <span className=\"text-sm\">Replay any analysis</span>\n                </div>\n              </div>\n\n              {/* CTA Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <button \n                  onClick={() => setIsDemoModalOpen(true)}\n                  className=\"bg-signal-teal hover:bg-signal-teal/90 text-white px-8 py-4 rounded-lg font-semibold text-lg transition-all transform hover:scale-105\"\n                  data-testid=\"button-book-demo-hero\"\n                >\n                  Book a Demo\n                </button>\n                <button \n                  onClick={openSamplePath}\n                  className=\"border-2 border-electric-blue text-electric-blue hover:bg-electric-blue hover:text-white px-8 py-4 rounded-lg font-semibold text-lg transition-all\"\n                  data-testid=\"button-open-sample-path\"\n                >\n                  See How It Works\n                </button>\n              </div>\n            </div>\n\n            {/* Hero Visual */}\n            <div className=\"relative\">\n              <CausalPathDemo />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <DemoModal \n        isOpen={isDemoModalOpen}\n        onClose={() => setIsDemoModalOpen(false)}\n      />\n      \n      <Dialog open={isCausalPathOpen} onOpenChange={setIsCausalPathOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-auto\">\n          <DialogHeader>\n            <DialogTitle>Interactive Causal Path Demo</DialogTitle>\n          </DialogHeader>\n          <CausalPathDemo />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":3724},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport DemoModal from \"./demo-modal\";\nimport { ThemeToggle } from \"./theme-toggle\";\nimport dawsOSLogo from \"@assets/DawsOS Icon_1758107642436.png\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isDemoModalOpen, setIsDemoModalOpen] = useState(false);\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/product\", label: \"Product\" },\n    { href: \"/solutions\", label: \"Solutions\" },\n    { href: \"/pricing\", label: \"Pricing\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/careers\", label: \"Careers\" },\n    { href: \"/trust\", label: \"Security\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const isActive = (href: string) => {\n    return location === href || (href === \"/\" && location === \"/\");\n  };\n\n  return (\n    <>\n      <nav className=\"fixed top-0 w-full bg-graphite/95 backdrop-blur-sm border-b border-muted z-50\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"flex items-center justify-between h-16\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n              <div className=\"w-8 h-8\">\n                <img src={dawsOSLogo} alt=\"DawsOS\" className=\"w-8 h-8 object-contain\" />\n              </div>\n              <span className=\"text-xl font-semibold text-white\">DawsOS</span>\n            </Link>\n\n            {/* Navigation Links - Desktop */}\n            <div className=\"hidden md:flex items-center space-x-8\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={`transition-colors ${\n                    isActive(link.href)\n                      ? \"text-white\"\n                      : \"text-muted-foreground hover:text-white\"\n                  }`}\n                  data-testid={`link-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex items-center space-x-3\">\n              <ThemeToggle />\n              <button \n                onClick={() => setIsDemoModalOpen(true)}\n                className=\"bg-signal-teal hover:bg-signal-teal/90 text-white px-6 py-2 rounded-lg font-medium transition-all transform hover:scale-105\"\n                data-testid=\"button-book-demo-nav\"\n              >\n                Book a Demo\n              </button>\n            </div>\n\n            {/* Mobile Menu Button */}\n            <button \n              className=\"md:hidden text-white\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n            </button>\n          </div>\n\n          {/* Mobile Menu */}\n          {isMobileMenuOpen && (\n            <div className=\"md:hidden border-t border-muted\">\n              <div className=\"px-2 pt-2 pb-3 space-y-1\">\n                {navLinks.map((link) => (\n                  <Link\n                    key={link.href}\n                    href={link.href}\n                    className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                      isActive(link.href)\n                        ? \"text-white bg-muted\"\n                        : \"text-muted-foreground hover:text-white hover:bg-muted\"\n                    }`}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    data-testid={`mobile-link-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {link.label}\n                  </Link>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      <DemoModal \n        isOpen={isDemoModalOpen}\n        onClose={() => setIsDemoModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":4160},"client/src/components/product-pillars.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Search, Gauge, FlaskConical, Settings, History } from \"lucide-react\";\n\nexport default function ProductPillars() {\n  return (\n    <section className=\"py-16 bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">How Your Work Gets Better</h1>\n          <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">\n            Stop guessing about market connections. Get clear answers with evidence your colleagues will trust.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n          {/* Chain Inspector */}\n          <Card className=\"bg-card border border-muted rounded-xl p-8 hover:border-signal-teal/30 transition-all\">\n            <div className=\"flex items-start space-x-4 mb-6\">\n              <div className=\"w-12 h-12 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center\">\n                <Search className=\"w-6 h-6 text-signal-teal\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold mb-2\">Never Miss What's Coming Next</h2>\n                <p className=\"text-muted-foreground\">Instead of reacting to surprises, see the chain of events before they hit your positions</p>\n              </div>\n            </div>\n\n            {/* Value Demo */}\n            <div className=\"bg-background border border-muted rounded-lg p-4 space-y-4\">\n              <div className=\"text-sm font-medium text-foreground\">Before DawsOS:</div>\n              <div className=\"pl-4 py-2 border-l-2 border-red-500/30 bg-red-500/5\">\n                <div className=\"text-sm text-muted-foreground\">\"Fed might hike rates... wonder what that means for our credit book?\"</div>\n                <div className=\"text-xs text-red-600 mt-1\">→ Hours of research, unclear conclusions</div>\n              </div>\n              \n              <div className=\"text-sm font-medium text-foreground\">With DawsOS:</div>\n              <div className=\"pl-4 py-2 border-l-2 border-signal-teal/30 bg-signal-teal/5\">\n                <div className=\"text-sm\">Rate hike → Credit spreads widen → Your loan portfolios down 3.2% in 2 weeks</div>\n                <div className=\"text-xs text-signal-teal mt-1\">91% confidence with Fed studies as evidence</div>\n              </div>\n\n              <div className=\"text-center pt-2\">\n                <button \n                  className=\"bg-signal-teal/20 text-signal-teal px-4 py-2 rounded-lg text-sm font-medium hover:bg-signal-teal/30 transition-all evidence-glow\"\n                  data-testid=\"button-two-clicks-evidence\"\n                >\n                  <Search className=\"w-4 h-4 inline mr-2\" />\n                  Show me the evidence →\n                </button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Risk Dashboard */}\n          <Card className=\"bg-card border border-muted rounded-xl p-8 hover:border-electric-blue/30 transition-all\">\n            <div className=\"flex items-start space-x-4 mb-6\">\n              <div className=\"w-12 h-12 bg-electric-blue/20 border border-electric-blue rounded-lg flex items-center justify-center\">\n                <Gauge className=\"w-6 h-6 text-electric-blue\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold mb-2\">Trust Your Confidence Scores</h2>\n                <p className=\"text-muted-foreground\">Finally, predictions that mean what they say—so you can size positions with real confidence</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"text-sm font-medium text-foreground\">Why This Matters for You:</div>\n              \n              <div className=\"flex items-start space-x-3 bg-background px-4 py-3 rounded-lg\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0\"></div>\n                <div>\n                  <div className=\"text-sm font-medium\">Honest confidence scores</div>\n                  <div className=\"text-xs text-muted-foreground\">When we say 85%, it actually happens 85% of the time</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3 bg-background px-4 py-3 rounded-lg\">\n                <div className=\"w-2 h-2 bg-electric-blue rounded-full mt-2 flex-shrink-0\"></div>\n                <div>\n                  <div className=\"text-sm font-medium\">Better than guessing</div>\n                  <div className=\"text-xs text-muted-foreground\">12% improvement over \"expert intuition\" alone</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3 bg-background px-4 py-3 rounded-lg\">\n                <div className=\"w-2 h-2 bg-provenance-purple rounded-full mt-2 flex-shrink-0\"></div>\n                <div>\n                  <div className=\"text-sm font-medium\">Stays accurate over time</div>\n                  <div className=\"text-xs text-muted-foreground\">Alerts you when market conditions change the patterns</div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Scenario Builder */}\n          <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-provenance-purple/30 transition-all\">\n            <div className=\"flex items-start space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-provenance-purple/20 border border-provenance-purple rounded-lg flex items-center justify-center\">\n                <FlaskConical className=\"w-5 h-5 text-provenance-purple\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Test Your Decisions First</h3>\n                <p className=\"text-sm text-muted-foreground\">See how different moves play out before you commit capital</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"text-xs text-muted-foreground\">\"What if we hedge now vs. wait 2 weeks?\"</div>\n              <div className=\"space-y-2\">\n                <div className=\"bg-background px-3 py-2 rounded text-xs\">\n                  <span className=\"text-green-400\">Hedge now:</span> -2.1% portfolio impact\n                </div>\n                <div className=\"bg-background px-3 py-2 rounded text-xs\">\n                  <span className=\"text-red-400\">Wait 2 weeks:</span> -8.7% if shock hits\n                </div>\n              </div>\n              <button \n                className=\"w-full text-provenance-purple text-xs hover:underline mt-2\"\n                data-testid=\"button-view-replay-link\"\n              >\n                Save this analysis →\n              </button>\n            </div>\n          </Card>\n\n          {/* Pattern Studio */}\n          <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-alert-amber/30 transition-all\">\n            <div className=\"flex items-start space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-alert-amber/20 border border-alert-amber rounded-lg flex items-center justify-center\">\n                <Settings className=\"w-5 h-5 text-alert-amber\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Add Your Own Patterns</h3>\n                <p className=\"text-sm text-muted-foreground\">Build company-specific insights that others can't see</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"text-xs text-muted-foreground\">Example: \"When our biggest client cuts guidance...\"</div>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-alert-amber rounded-full\"></div>\n                  <span className=\"text-xs\">Draft pattern for testing</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-electric-blue rounded-full\"></div>\n                  <span className=\"text-xs\">Team review & validation</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-xs\">Live in your workflows</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Provenance Popover */}\n          <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-signal-teal/30 transition-all\">\n            <div className=\"flex items-start space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center\">\n                <History className=\"w-5 h-5 text-signal-teal\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Defend Every Decision</h3>\n                <p className=\"text-sm text-muted-foreground\">Show your boss exactly where each number came from</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"text-xs text-muted-foreground\">\"How did you know rates would impact us this way?\"</div>\n              <div className=\"space-y-2\">\n                <div className=\"snapshot-token px-3 py-2 rounded text-xs\">\n                  Fed research paper (2019)\n                </div>\n                <div className=\"snapshot-token px-3 py-2 rounded text-xs\">\n                  Historical rate data\n                </div>\n                <div className=\"snapshot-token px-3 py-2 rounded text-xs\">\n                  Your portfolio composition\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Overall Value Section */}\n        <div className=\"mt-16 pt-12 border-t border-muted\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold mb-4\">The Bottom Line</h2>\n            <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n              Your work changes from reactive guesswork to proactive decision-making with evidence\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-red-500/5 border border-red-500/20 rounded-xl p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                <h3 className=\"text-lg font-semibold\">Without DawsOS</h3>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div className=\"text-sm text-muted-foreground\">\"Something's happening in the market... let me dig around for a few hours\"</div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div className=\"text-sm text-muted-foreground\">\"I think this might affect us, but I'm not sure how much\"</div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div className=\"text-sm text-muted-foreground\">\"We made this decision 6 months ago... why did we do that again?\"</div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-green-500/5 border border-green-500/20 rounded-xl p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                <h3 className=\"text-lg font-semibold\">With DawsOS</h3>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div className=\"text-sm text-muted-foreground\">\"Market shock detected → Here's the 3-step impact chain to your positions\"</div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div className=\"text-sm text-muted-foreground\">\"87% confidence this affects your tech names in 2 weeks\"</div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div className=\"text-sm text-muted-foreground\">\"Here's the analysis from 6 months ago, with all the evidence links\"</div>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          <div className=\"text-center mt-8\">\n            <p className=\"text-foreground font-medium\">\n              Stop playing catch-up. Start seeing around corners.\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":13398},"client/src/components/slo-dashboard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\n\nexport default function SLODashboard() {\n  return (\n    <Card className=\"bg-background border border-muted rounded-xl p-8\">\n      <h3 className=\"text-xl font-semibold mb-6 text-center\">Performance Promises</h3>\n      <p className=\"text-muted-foreground text-center mb-8\">These are our guarantees to you. If we don't meet them, something needs fixing.</p>\n      \n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-signal-teal mb-1\" data-testid=\"text-uptime-percentage\">99.97%</div>\n          <div className=\"text-sm font-medium mb-1\">System Available</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: 99.9% uptime</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-signal-teal h-2 rounded-full\" style={{ width: \"99.97%\" }}></div>\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-electric-blue mb-1\" data-testid=\"text-traversal-p95\">8.3s</div>\n          <div className=\"text-sm font-medium mb-1\">Shock Path Speed</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: Under 10s, 95% of time</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-electric-blue h-2 rounded-full\" style={{ width: \"83%\" }}></div>\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-provenance-purple mb-1\" data-testid=\"text-alert-e2e\">1.8m</div>\n          <div className=\"text-sm font-medium mb-1\">Alert Speed</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: Notify you within 2 min</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-provenance-purple h-2 rounded-full\" style={{ width: \"90%\" }}></div>\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-green-400 mb-1\" data-testid=\"text-ece-score\">0.03</div>\n          <div className=\"text-sm font-medium mb-1\">Confidence Accuracy</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: Stay below 0.05 error</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-green-400 h-2 rounded-full\" style={{ width: \"94%\" }}></div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"text-center mt-8\">\n        <span className=\"text-sm text-green-400 font-medium\">✓ All promises kept</span>\n        <p className=\"text-xs text-muted-foreground mt-2\">Mission-critical performance you can count on</p>\n      </div>\n\n      {/* Detailed Explanations */}\n      <div className=\"mt-8 grid md:grid-cols-2 gap-6 pt-8 border-t border-muted\">\n        <div>\n          <h4 className=\"font-semibold mb-2 text-electric-blue\">Shock Path Speed</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            When you ask \"show me how this shock spreads,\" how long does it take to map the full path?\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            You need answers fast when markets are moving. No one wants to wait 30 seconds to see if their portfolio is about to get hit.\n          </p>\n        </div>\n        \n        <div>\n          <h4 className=\"font-semibold mb-2 text-provenance-purple\">Alert Speed</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            From the moment a new shock happens until you get notified about potential impacts to your positions.\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            In fast-moving markets, being 5 minutes late with a critical alert could cost millions. This guarantees you're always in the first wave.\n          </p>\n        </div>\n\n        <div>\n          <h4 className=\"font-semibold mb-2 text-green-400\">Confidence Accuracy</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            How honest the confidence scores are. If DawsOS says \"90% confident,\" is it right 90% of the time?\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            If the system says \"85% chance this bank gets hit next,\" you need to trust that number for position sizing and risk decisions.\n          </p>\n        </div>\n\n        <div>\n          <h4 className=\"font-semibold mb-2 text-signal-teal\">System Available</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            The percentage of time DawsOS is running and ready when you need it.\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            When markets are in crisis, the platform needs to be there. This measures our reliability promise to you.\n          </p>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5026},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertDemoRequestSchema, type InsertDemoRequest } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<Partial<InsertDemoRequest>>({\n    name: \"\",\n    email: \"\",\n    company: \"\",\n    role: \"\",\n    sector: \"\",\n    urgency: \"\",\n    sloRequirements: \"\",\n    useCase: \"\",\n    newsletter: false,\n  });\n\n  const createDemoRequest = useMutation({\n    mutationFn: async (data: InsertDemoRequest) => {\n      return await apiRequest(\"POST\", \"/api/demo-requests\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demo Request Submitted\",\n        description: \"Our team will contact you within 24 hours.\",\n      });\n      // Reset form\n      setFormData({\n        name: \"\",\n        email: \"\",\n        company: \"\",\n        role: \"\",\n        sector: \"\",\n        urgency: \"\",\n        sloRequirements: \"\",\n        useCase: \"\",\n        newsletter: false,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit demo request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const validatedData = insertDemoRequestSchema.parse(formData);\n      await createDemoRequest.mutateAsync(validatedData);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please check all required fields.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const updateField = (field: keyof InsertDemoRequest, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"pt-16\">\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-4xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">Ready to See DawsOS in Action?</h1>\n            <p className=\"text-muted-foreground text-lg\">Book a personalized demo tailored to your role and sector</p>\n          </div>\n\n          <Card className=\"bg-card border border-muted rounded-2xl p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"John Doe\"\n                    value={formData.name || \"\"}\n                    onChange={(e) => updateField(\"name\", e.target.value)}\n                    className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                    required\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"john@company.com\"\n                    value={formData.email || \"\"}\n                    onChange={(e) => updateField(\"email\", e.target.value)}\n                    className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"company\">Company *</Label>\n                  <Input\n                    id=\"company\"\n                    type=\"text\"\n                    placeholder=\"Acme Corp\"\n                    value={formData.company || \"\"}\n                    onChange={(e) => updateField(\"company\", e.target.value)}\n                    className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                    required\n                    data-testid=\"input-company\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\">Role *</Label>\n                  <Select value={formData.role || \"\"} onValueChange={(value) => updateField(\"role\", value)} required>\n                    <SelectTrigger className=\"bg-background border-muted text-foreground focus:border-signal-teal\" data-testid=\"select-role\">\n                      <SelectValue placeholder=\"Select your role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"risk-manager\">Risk Manager</SelectItem>\n                      <SelectItem value=\"portfolio-analyst\">Portfolio Analyst</SelectItem>\n                      <SelectItem value=\"policy-analyst\">Policy Analyst</SelectItem>\n                      <SelectItem value=\"economist\">Economist/Strategist</SelectItem>\n                      <SelectItem value=\"credit-officer\">Credit Officer</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sector\">Sector</Label>\n                  <Select value={formData.sector || \"\"} onValueChange={(value) => updateField(\"sector\", value)}>\n                    <SelectTrigger className=\"bg-background border-muted text-foreground focus:border-signal-teal\" data-testid=\"select-sector\">\n                      <SelectValue placeholder=\"Select sector\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"banking\">Banking</SelectItem>\n                      <SelectItem value=\"energy\">Energy</SelectItem>\n                      <SelectItem value=\"semiconductors\">Semiconductors</SelectItem>\n                      <SelectItem value=\"insurance\">Insurance</SelectItem>\n                      <SelectItem value=\"government\">Government/Policy</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"urgency\">Urgency</Label>\n                  <Select value={formData.urgency || \"\"} onValueChange={(value) => updateField(\"urgency\", value)}>\n                    <SelectTrigger className=\"bg-background border-muted text-foreground focus:border-signal-teal\" data-testid=\"select-urgency\">\n                      <SelectValue placeholder=\"Select urgency\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"immediate\">Immediate (within 1 week)</SelectItem>\n                      <SelectItem value=\"soon\">Soon (within 1 month)</SelectItem>\n                      <SelectItem value=\"exploring\">Exploring (3+ months)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"sloRequirements\">SLO Requirements</Label>\n                <Textarea\n                  id=\"sloRequirements\"\n                  placeholder=\"Describe your performance, calibration, or explainability requirements...\"\n                  value={formData.sloRequirements || \"\"}\n                  onChange={(e) => updateField(\"sloRequirements\", e.target.value)}\n                  className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                  rows={3}\n                  data-testid=\"textarea-slo-requirements\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"useCase\">Use Case</Label>\n                <Textarea\n                  id=\"useCase\"\n                  placeholder=\"Describe the risk scenarios you'd like to explore...\"\n                  value={formData.useCase || \"\"}\n                  onChange={(e) => updateField(\"useCase\", e.target.value)}\n                  className=\"bg-background border-muted text-foreground placeholder-muted-foreground focus:border-signal-teal\"\n                  rows={4}\n                  data-testid=\"textarea-use-case\"\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox \n                  id=\"newsletter\"\n                  checked={formData.newsletter}\n                  onCheckedChange={(checked) => updateField(\"newsletter\", !!checked)}\n                  className=\"border-muted data-[state=checked]:bg-signal-teal data-[state=checked]:border-signal-teal\"\n                  data-testid=\"checkbox-newsletter\"\n                />\n                <Label htmlFor=\"newsletter\" className=\"text-sm text-muted-foreground\">\n                  Subscribe to product updates and risk analysis insights\n                </Label>\n              </div>\n\n              <div className=\"text-center\">\n                <Button \n                  type=\"submit\"\n                  disabled={createDemoRequest.isPending}\n                  className=\"bg-signal-teal hover:bg-signal-teal/90 text-white px-12 py-4 rounded-lg font-semibold text-lg transition-all transform hover:scale-105\"\n                  data-testid=\"button-book-demo\"\n                >\n                  {createDemoRequest.isPending ? \"Submitting...\" : \"Book Demo\"}\n                </Button>\n              </div>\n            </form>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":10486},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport Hero from \"@/components/hero\";\nimport CausalPathDemo from \"@/components/causal-path-demo\";\nimport DemoModal from \"@/components/demo-modal\";\nimport { Card } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Shield, TrendingUp, Globe, University, Coins, Search, ArrowRight } from \"lucide-react\";\n\nexport default function Home() {\n  const [isDemoModalOpen, setIsDemoModalOpen] = useState(false);\n  const [isCausalPathOpen, setIsCausalPathOpen] = useState(false);\n\n  const openSampleQuery = () => {\n    setIsDemoModalOpen(true);\n  };\n\n  const openCausalPath = () => {\n    setIsCausalPathOpen(true);\n  };\n\n  const openEvidence = () => {\n    setIsCausalPathOpen(true);\n  };\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <Hero />\n\n      {/* How It Works */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">How It Works</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              From any market event to clear action—with evidence you can defend\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-signal-teal/20 border border-signal-teal rounded-full flex items-center justify-center mx-auto\">\n                <span className=\"text-signal-teal text-xl font-bold\">1</span>\n              </div>\n              <h3 className=\"text-xl font-semibold\">Start with any signal</h3>\n              <p className=\"text-muted-foreground\">\n                A rate hike, a zoning policy change, or a supply chain delay—start with anything that moves your world.\n              </p>\n              <button\n                onClick={openSampleQuery}\n                className=\"text-signal-teal hover:underline\"\n                data-testid=\"button-view-sample-query\"\n              >\n                See sample query →\n              </button>\n            </div>\n\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-electric-blue/20 border border-electric-blue rounded-full flex items-center justify-center mx-auto\">\n                <span className=\"text-electric-blue text-xl font-bold\">2</span>\n              </div>\n              <h3 className=\"text-xl font-semibold\">Get the ripple map</h3>\n              <p className=\"text-muted-foreground\">\n                See who's impacted next, with timing and confidence. Every step shows its probability and reasoning.\n              </p>\n              <button\n                onClick={openCausalPath}\n                className=\"text-electric-blue hover:underline\"\n                data-testid=\"button-open-causal-path\"\n              >\n                See the path →\n              </button>\n            </div>\n\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-provenance-purple/20 border border-provenance-purple rounded-full flex items-center justify-center mx-auto\">\n                <span className=\"text-provenance-purple text-xl font-bold\">3</span>\n              </div>\n              <h3 className=\"text-xl font-semibold\">Act with evidence</h3>\n              <p className=\"text-muted-foreground\">\n                Every forecast comes with its causal path and provenance. Replay any analysis anytime.\n              </p>\n              <button\n                onClick={openEvidence}\n                className=\"text-provenance-purple hover:underline\"\n                data-testid=\"button-view-evidence\"\n              >\n                View evidence →\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Value Proposition Tiles */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Built for Business-Grade Decisions</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Every feature designed for compliance, auditability, and reliability\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-signal-teal transition-all text-center\">\n              <div className=\"w-12 h-12 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"w-6 h-6 text-signal-teal\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Two clicks to evidence</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Every claim is linked to its source. No black box predictions.\n              </p>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-electric-blue transition-all text-center\">\n              <div className=\"w-12 h-12 bg-electric-blue/20 border border-electric-blue rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <TrendingUp className=\"w-6 h-6 text-electric-blue\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Calibrated confidence</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Probabilities meet strict error guarantees. No overconfident guessing.\n              </p>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-provenance-purple transition-all text-center\">\n              <div className=\"w-12 h-12 bg-provenance-purple/20 border border-provenance-purple rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-6 h-6 text-provenance-purple\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Replayable snapshots</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Reproduce any analysis, anytime. Full audit trail included.\n              </p>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-alert-amber transition-all text-center\">\n              <div className=\"w-12 h-12 bg-alert-amber/20 border border-alert-amber rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Globe className=\"w-6 h-6 text-alert-amber\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Governed by design</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Immutable rules enforce explainability and compliance by default.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Sector-Specific Callouts */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Built for Real Estate & Finance</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              See exactly how market events cascade through your portfolios and properties\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-background border border-muted rounded-xl p-8\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <div className=\"w-10 h-10 bg-risk-red/20 border border-risk-red rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"w-5 h-5 text-risk-red\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold\">Rate Hike Impact Chain</h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-alert-amber rounded-full\"></div>\n                    <span className=\"text-muted-foreground\">Fed raises rates 0.5%</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-sm pl-5\">\n                    <ArrowRight className=\"w-4 h-4 text-signal-teal\" />\n                    <span className=\"text-muted-foreground\">Variable mortgage resets kick in</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-sm pl-5\">\n                    <ArrowRight className=\"w-4 h-4 text-signal-teal\" />\n                    <span className=\"text-muted-foreground\">Payment stress leads to arrears</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-sm pl-5\">\n                    <ArrowRight className=\"w-4 h-4 text-signal-teal\" />\n                    <span className=\"text-muted-foreground\">Legal exposure increases litigation risk</span>\n                  </div>\n                </div>\n\n                <div className=\"bg-risk-red/10 border border-risk-red/30 rounded-lg p-4 mt-6\">\n                  <p className=\"text-sm text-foreground font-medium\">\n                    Understand how rate hikes flow into mortgage resets, arrears, and litigation.\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    See timing, confidence scores, and affected property segments\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-background border border-muted rounded-xl p-8\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <div className=\"w-10 h-10 bg-electric-blue/20 border border-electric-blue rounded-lg flex items-center justify-center\">\n                    <Globe className=\"w-5 h-5 text-electric-blue\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold\">Policy Impact Testing</h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-electric-blue rounded-full\"></div>\n                    <span className=\"text-muted-foreground\">Rent control policy proposed</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-sm pl-5\">\n                    <ArrowRight className=\"w-4 h-4 text-signal-teal\" />\n                    <span className=\"text-muted-foreground\">New construction permits decline</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-sm pl-5\">\n                    <ArrowRight className=\"w-4 h-4 text-signal-teal\" />\n                    <span className=\"text-muted-foreground\">Supply constraints tighten market</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-sm pl-5\">\n                    <ArrowRight className=\"w-4 h-4 text-signal-teal\" />\n                    <span className=\"text-muted-foreground\">Property values shift by segment</span>\n                  </div>\n                </div>\n\n                <div className=\"bg-electric-blue/10 border border-electric-blue/30 rounded-lg p-4 mt-6\">\n                  <p className=\"text-sm text-foreground font-medium\">\n                    Scenario Builder helps test rent control or zoning policy changes — instantly.\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Run side-by-side comparisons with confidence intervals\n                  </p>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <button className=\"bg-signal-teal hover:bg-signal-teal/90 text-white px-8 py-3 rounded-lg font-semibold transition-all\" data-testid=\"button-explore-scenarios\">\n              Explore Your Scenarios\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* For Your Role */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Works with Your Existing Tools</h2>\n            <p className=\"text-muted-foreground\">Keep Bloomberg, MSCI, and Aladdin. Add the missing \"why-next\" layer.</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-signal-teal/50 transition-all cursor-pointer group\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-signal-teal/20 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-signal-teal\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold mb-2\">Risk Manager</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    When a downgrade rumor hits Bloomberg, see the next-order impacts with timing and confidence. Hand the path to your committee.\n                  </p>\n                  <button\n                    className=\"text-signal-teal text-sm font-medium group-hover:underline\"\n                    data-testid=\"button-role-risk-manager\"\n                  >\n                    Learn more →\n                  </button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-electric-blue/50 transition-all cursor-pointer group\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-electric-blue/20 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-5 h-5 text-electric-blue\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold mb-2\">Portfolio Analyst</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    When a supplier outage crosses the tape, trace ripples through your names and MSCI factors. Document evidence, act in Aladdin.\n                  </p>\n                  <button\n                    className=\"text-electric-blue text-sm font-medium group-hover:underline\"\n                    data-testid=\"button-role-portfolio-analyst\"\n                  >\n                    Learn more →\n                  </button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-provenance-purple/50 transition-all cursor-pointer group\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-provenance-purple/20 rounded-lg flex items-center justify-center\">\n                  <University className=\"w-5 h-5 text-provenance-purple\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold mb-2\">Policy Analyst</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    When tariffs are proposed, run side-by-side scenarios to show who's hit next and when. Frame results in MSCI terms.\n                  </p>\n                  <button\n                    className=\"text-provenance-purple text-sm font-medium group-hover:underline\"\n                    data-testid=\"button-role-policy-analyst\"\n                  >\n                    Learn more →\n                  </button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-signal-teal/50 transition-all cursor-pointer group\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-signal-teal/20 rounded-lg flex items-center justify-center\">\n                  <Globe className=\"w-5 h-5 text-signal-teal\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold mb-2\">Economist/Strategist</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    When macro prints surprise, Bloomberg gives you speed; DawsOS shows how it spreads with calibrated odds.\n                  </p>\n                  <button\n                    className=\"text-signal-teal text-sm font-medium group-hover:underline\"\n                    data-testid=\"button-role-economist\"\n                  >\n                    Learn more →\n                  </button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-alert-amber/50 transition-all cursor-pointer group\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-10 h-10 bg-alert-amber/20 rounded-lg flex items-center justify-center\">\n                  <Coins className=\"w-5 h-5 text-alert-amber\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold mb-2\">Credit Officer</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    When a counterparty weakens, get more than a score. Get the causal path with provenance for audit.\n                  </p>\n                  <button\n                    className=\"text-alert-amber text-sm font-medium group-hover:underline\"\n                    data-testid=\"button-role-credit-officer\"\n                  >\n                    Learn more →\n                  </button>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Performance Snapshot */}\n      <section className=\"py-12 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl font-bold mb-4\">Performance Promises</h2>\n            <p className=\"text-muted-foreground\">Real-time system performance metrics</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"bg-background border border-muted rounded-lg p-6 text-center\">\n              <div className=\"font-mono text-3xl font-bold text-signal-teal mb-2\" data-testid=\"text-traversal-time\">8.3s</div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Shock Path Speed</div>\n              <div className=\"text-xs text-green-400\">✓ Under 10 seconds</div>\n            </Card>\n\n            <Card className=\"bg-background border border-muted rounded-lg p-6 text-center\">\n              <div className=\"font-mono text-3xl font-bold text-electric-blue mb-2\" data-testid=\"text-alert-time\">1.8m</div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Alert Speed</div>\n              <div className=\"text-xs text-green-400\">✓ Under 2 minutes</div>\n            </Card>\n\n            <Card className=\"bg-background border border-muted rounded-lg p-6 text-center\">\n              <div className=\"font-mono text-3xl font-bold text-provenance-purple mb-2\" data-testid=\"text-calibration-ece\">0.03</div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Confidence Accuracy</div>\n              <div className=\"text-xs text-green-400\">✓ Under 0.05 error</div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Build like DawsOS - Retail Kit Section */}\n      <section className=\"py-20 bg-gradient-to-r from-graphite to-slate\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <div className=\"inline-block bg-signal-teal/10 border border-signal-teal/20 text-signal-teal px-4 py-2 rounded-full text-sm font-medium mb-8\">\n              Retail Kit\n            </div>\n            <h2 className=\"text-4xl lg:text-5xl font-bold mb-6 text-white\">\n              Build like DawsOS\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-12 leading-relaxed\">\n              The method we used to scale from idea to an enterprise-grade OS—now a simple kit for founders, operators, and creators.\n            </p>\n            \n            {/* Key Features */}\n            <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n              <div className=\"bg-card/10 backdrop-blur-sm border border-muted/20 rounded-xl p-6\">\n                <div className=\"w-12 h-12 bg-signal-teal/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Search className=\"w-6 h-6 text-signal-teal\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-white mb-3\">Two clicks to evidence</h3>\n                <p className=\"text-gray-400 text-sm\">\n                  Every prediction returns a causal path, its provenance, and a calibrated probability—as a build rule.\n                </p>\n              </div>\n              \n              <div className=\"bg-card/10 backdrop-blur-sm border border-muted/20 rounded-xl p-6\">\n                <div className=\"w-12 h-12 bg-electric-blue/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"w-6 h-6 text-electric-blue\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-white mb-3\">Governed schemas & versioned events</h3>\n                <p className=\"text-gray-400 text-sm\">\n                  Event taxonomy, canonical envelopes, and patterns that create virtual edges without altering facts.\n                </p>\n              </div>\n              \n              <div className=\"bg-card/10 backdrop-blur-sm border border-muted/20 rounded-xl p-6\">\n                <div className=\"w-12 h-12 bg-provenance-purple/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <TrendingUp className=\"w-6 h-6 text-provenance-purple\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-white mb-3\">Calibrated outputs and replayable snapshots</h3>\n                <p className=\"text-gray-400 text-sm\">\n                  Probabilities that meet strict error targets, with snapshots that let you replay any decision state exactly.\n                </p>\n              </div>\n            </div>\n            \n            {/* What's Different */}\n            <div className=\"bg-card/5 backdrop-blur-sm border border-muted/10 rounded-2xl p-8 mb-12\">\n              <h3 className=\"text-2xl font-bold text-white mb-4\">Why it's different</h3>\n              <p className=\"text-gray-300 text-lg leading-relaxed\">\n                Most \"prompt packs\" sell tricks. This is a governed operating model that ships evidence, calibration, and replay into your product from day one. From blank page to architecture draft—this weekend.\n              </p>\n            </div>\n            \n            {/* CTA */}\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n              <a \n                href=\"/pricing\" \n                className=\"bg-signal-teal hover:bg-signal-teal/90 text-white px-8 py-4 rounded-lg font-semibold text-lg transition-all transform hover:scale-105\"\n                data-testid=\"button-explore-method\"\n              >\n                Explore the Method\n                <ArrowRight className=\"w-5 h-5 inline-block ml-2\" />\n              </a>\n              <a \n                href=\"/products\" \n                className=\"border-2 border-electric-blue text-electric-blue hover:bg-electric-blue hover:text-white px-8 py-4 rounded-lg font-semibold text-lg transition-all\"\n                data-testid=\"button-see-whats-inside\"\n              >\n                See what's inside\n              </a>\n            </div>\n            \n            {/* 72-hour guarantee */}\n            <div className=\"mt-8 text-center\">\n              <p className=\"text-gray-400 text-sm\">\n                <strong className=\"text-signal-teal\">72-hour guarantee:</strong> If you don't generate a complete draft in 72 hours, we'll refund you—no questions asked.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Modals and Demos */}\n      <DemoModal \n        isOpen={isDemoModalOpen} \n        onClose={() => setIsDemoModalOpen(false)} \n      />\n      \n      <Dialog open={isCausalPathOpen} onOpenChange={setIsCausalPathOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-auto\">\n          <DialogHeader>\n            <DialogTitle>Causal Path Analysis</DialogTitle>\n          </DialogHeader>\n          <CausalPathDemo />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24996},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport DemoModal from \"@/components/demo-modal\";\nimport { useState } from \"react\";\n\nexport default function Pricing() {\n  const [isDemoModalOpen, setIsDemoModalOpen] = useState(false);\n\n  return (\n    <div className=\"pt-16\">\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">Simple, Clear Pricing</h1>\n            <p className=\"text-muted-foreground text-lg\">Pay for what you use. No surprises. Enterprise-grade performance.</p>\n          </div>\n\n          <Card className=\"bg-card border border-muted rounded-2xl p-8 max-w-4xl mx-auto\">\n            <h2 className=\"text-xl font-semibold mb-6 text-center\">What You Pay For</h2>\n            \n            <div className=\"space-y-6\">\n              {/* Base Tenant */}\n              <div className=\"flex items-center justify-between p-4 bg-background rounded-lg\">\n                <div>\n                  <h3 className=\"font-semibold\">Platform Access</h3>\n                  <p className=\"text-sm text-muted-foreground\">Your secure workspace with all the tools and governance controls</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-mono text-lg font-bold\" data-testid=\"text-base-tenant-price\">$25,000</div>\n                  <div className=\"text-sm text-muted-foreground\">/month</div>\n                </div>\n              </div>\n\n              {/* Seats */}\n              <div className=\"flex items-center justify-between p-4 bg-background rounded-lg\">\n                <div>\n                  <h3 className=\"font-semibold\">User Seats</h3>\n                  <p className=\"text-sm text-muted-foreground\">Each person who uses the platform (analysts, risk managers, economists)</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-mono text-lg font-bold\" data-testid=\"text-user-seat-price\">$500</div>\n                  <div className=\"text-sm text-muted-foreground\">/user/month</div>\n                </div>\n              </div>\n\n              {/* Usage Meters */}\n              <div className=\"p-4 bg-background rounded-lg\">\n                <h3 className=\"font-semibold mb-3\">Pay as You Go</h3>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Map a shock path</span>\n                    <span className=\"font-mono text-sm\" data-testid=\"text-traversal-price\">$0.10 each</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Get predictions</span>\n                    <span className=\"font-mono text-sm\" data-testid=\"text-prediction-price\">$0.50 each</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Save a replay</span>\n                    <span className=\"font-mono text-sm\" data-testid=\"text-snapshot-price\">$2.00 each</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Check evidence</span>\n                    <span className=\"font-mono text-sm\" data-testid=\"text-evidence-price\">$0.05 each</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Pattern Packs */}\n              <div className=\"flex items-center justify-between p-4 bg-background rounded-lg\">\n                <div>\n                  <h3 className=\"font-semibold\">Pattern Packs</h3>\n                  <p className=\"text-sm text-muted-foreground\">Banking, Energy, Semiconductors</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-mono text-lg font-bold\" data-testid=\"text-pattern-pack-price\">$5,000</div>\n                  <div className=\"text-sm text-muted-foreground\">/pack/month</div>\n                </div>\n              </div>\n\n              {/* SLA Tiers */}\n              <div className=\"p-4 bg-background rounded-lg\">\n                <h3 className=\"font-semibold mb-3\">SLA Tiers</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Standard (95% under 10s)</span>\n                    <span className=\"text-signal-teal text-sm\">Included</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Premium (95% under 5s)</span>\n                    <span className=\"font-mono text-sm\" data-testid=\"text-premium-sla-price\">+$10,000/month</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Mission Critical (95% under 2s)</span>\n                    <span className=\"font-mono text-sm\" data-testid=\"text-mission-critical-sla-price\">+$25,000/month</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center mt-8\">\n              <button \n                onClick={() => setIsDemoModalOpen(true)}\n                className=\"bg-signal-teal hover:bg-signal-teal/90 text-white px-8 py-3 rounded-lg font-semibold text-lg transition-all\"\n                data-testid=\"button-get-custom-quote\"\n              >\n                Get Custom Quote\n              </button>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      <DemoModal \n        isOpen={isDemoModalOpen}\n        onClose={() => setIsDemoModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":5814},"client/src/pages/product.tsx":{"content":"import ProductPillars from \"@/components/product-pillars\";\n\nexport default function Product() {\n  return (\n    <div className=\"pt-16\">\n      <ProductPillars />\n    </div>\n  );\n}\n","size_bytes":178},"client/src/pages/solutions.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { University } from \"lucide-react\";\n\nexport default function Solutions() {\n  return (\n    <div className=\"pt-16\">\n      {/* Solutions Header */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">Skip the Research</h1>\n            <p className=\"text-muted-foreground text-lg\">We've already mapped the connections that matter to your industry. Just plug in your data and go.</p>\n          </div>\n\n          {/* Banks Sector */}\n          <div className=\"mb-12\">\n            <div className=\"flex items-center space-x-4 mb-8\">\n              <div className=\"w-16 h-16 bg-signal-teal/20 border border-signal-teal rounded-xl flex items-center justify-center\">\n                <University className=\"w-8 h-8 text-signal-teal\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold\">For Banks & Financial Services</h2>\n                <p className=\"text-muted-foreground\">Stop being surprised by market moves. See what hits your profits before it happens.</p>\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"bg-background border border-muted rounded-lg p-6 hover:border-signal-teal/50 transition-all\">\n                <h3 className=\"font-semibold mb-2\">Rate Hike Early Warning</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">Know which of your loans get squeezed first when the Fed moves rates</p>\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"text-xs bg-signal-teal/10 px-2 py-1 rounded\">Example: Variable rate commercial loans hit within 30 days</div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-signal-teal font-medium\">94% accurate historically</span>\n                  <button \n                    className=\"text-signal-teal text-xs hover:underline\"\n                    data-testid=\"button-evidence-interest-rate\"\n                  >\n                    See the data →\n                  </button>\n                </div>\n              </Card>\n\n              <Card className=\"bg-background border border-muted rounded-lg p-6 hover:border-electric-blue/50 transition-all\">\n                <h3 className=\"font-semibold mb-2\">Default Domino Effect</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">See which of your other customers get hurt when a major client defaults</p>\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"text-xs bg-electric-blue/10 px-2 py-1 rounded\">Example: Suppliers and partners in the same region</div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-electric-blue font-medium\">89% accurate historically</span>\n                  <button \n                    className=\"text-electric-blue text-xs hover:underline\"\n                    data-testid=\"button-evidence-credit-default\"\n                  >\n                    See the data →\n                  </button>\n                </div>\n              </Card>\n\n              <Card className=\"bg-background border border-muted rounded-lg p-6 hover:border-provenance-purple/50 transition-all\">\n                <h3 className=\"font-semibold mb-2\">Liquidity Stress Test</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">Know which funding sources disappear first when markets turn volatile</p>\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"text-xs bg-provenance-purple/10 px-2 py-1 rounded\">Example: Short-term wholesale funding vs. deposit base</div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-provenance-purple font-medium\">91% accurate historically</span>\n                  <button \n                    className=\"text-provenance-purple text-xs hover:underline\"\n                    data-testid=\"button-evidence-liquidity\"\n                  >\n                    See the data →\n                  </button>\n                </div>\n              </Card>\n\n              <Card className=\"bg-background border border-muted rounded-lg p-6 hover:border-alert-amber/50 transition-all\">\n                <h3 className=\"font-semibold mb-2\">Regulatory Impact Calculator</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">See what new banking rules really mean for your capital and operations</p>\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"text-xs bg-alert-amber/10 px-2 py-1 rounded\">Example: Basel changes → Your tier 1 capital requirements</div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-alert-amber font-medium\">87% accurate historically</span>\n                  <button \n                    className=\"text-alert-amber text-xs hover:underline\"\n                    data-testid=\"button-evidence-regulatory\"\n                  >\n                    See the data →\n                  </button>\n                </div>\n              </Card>\n\n              <Card className=\"bg-background border border-muted rounded-lg p-6 hover:border-signal-teal/50 transition-all\">\n                <h3 className=\"font-semibold mb-2\">Housing Market Alert</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">Get early warning when housing bubbles threaten your mortgage portfolio</p>\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"text-xs bg-signal-teal/10 px-2 py-1 rounded\">Example: Price-to-income ratios → Default rates by region</div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-signal-teal font-medium\">82% accurate historically</span>\n                  <button \n                    className=\"text-signal-teal text-xs hover:underline\"\n                    data-testid=\"button-evidence-real-estate\"\n                  >\n                    See the data →\n                  </button>\n                </div>\n              </Card>\n\n              <Card className=\"bg-background border border-muted rounded-lg p-6 hover:border-electric-blue/50 transition-all\">\n                <h3 className=\"font-semibold mb-2\">Cyber Risk Cascade</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">Understand the full cost when cyber incidents hit your operations</p>\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"text-xs bg-electric-blue/10 px-2 py-1 rounded\">Example: Data breach → Customer trust → Deposit outflows</div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-electric-blue font-medium\">76% accurate historically</span>\n                  <button \n                    className=\"text-electric-blue text-xs hover:underline\"\n                    data-testid=\"button-evidence-cyber\"\n                  >\n                    See the data →\n                  </button>\n                </div>\n              </Card>\n            </div>\n          </div>\n\n          {/* Value Connection */}\n          <div className=\"mt-16 pt-12 border-t border-muted\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4\">How This Changes Your Day</h2>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <div className=\"font-medium text-red-600 mb-1\">The Old Way</div>\n                    <div className=\"text-sm text-muted-foreground\">\"Fed just hiked rates... let me spend the morning figuring out what this means for our loan book\"</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <div className=\"font-medium text-red-600 mb-1\">Research Mode</div>\n                    <div className=\"text-sm text-muted-foreground\">\"Let me pull up the last three rate cycles and see what happened to similar portfolios...\"</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <div className=\"font-medium text-red-600 mb-1\">Guesswork</div>\n                    <div className=\"text-sm text-muted-foreground\">\"Based on my experience, I think our commercial real estate loans might see some pressure...\"</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <div className=\"font-medium text-green-600 mb-1\">With DawsOS</div>\n                    <div className=\"text-sm text-muted-foreground\">\"Alert: Fed rate hike → Variable rate commercial loans will see 15% higher defaults in 30-45 days\"</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <div className=\"font-medium text-green-600 mb-1\">Instant Evidence</div>\n                    <div className=\"text-sm text-muted-foreground\">\"Based on 1995, 2004, and 2015 cycles. Here are the Fed papers and your portfolio data that support this\"</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <div>\n                    <div className=\"font-medium text-green-600 mb-1\">Clear Action</div>\n                    <div className=\"text-sm text-muted-foreground\">\"Recommend immediate review of $45M in variable rate real estate loans. Here's the list to start with.\"</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center mt-8 p-6 bg-card rounded-xl\">\n              <p className=\"text-foreground font-medium mb-2\">\n                Stop researching the same patterns over and over.\n              </p>\n              <p className=\"text-muted-foreground text-sm\">\n                Your industry's cause-and-effect relationships are already mapped, tested, and ready to use.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":11382},"client/src/pages/trust.tsx":{"content":"import PerformanceDashboard from \"@/components/performance-dashboard\";\nimport { Card } from \"@/components/ui/card\";\nimport { Lock, Scale, History, CheckCircle } from \"lucide-react\";\n\nexport default function Trust() {\n  return (\n    <div className=\"pt-16\">\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">Security & Performance</h1>\n            <p className=\"text-muted-foreground text-lg\">Bank-grade security with guaranteed performance you can count on</p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Security */}\n            <Card className=\"bg-background border border-muted rounded-xl p-6\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center\">\n                  <Lock className=\"w-6 h-6 text-signal-teal\" />\n                </div>\n                <h2 className=\"text-xl font-semibold\">Your Data is Safe</h2>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Bank-grade encryption everywhere</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Control who sees what, when</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Track every action for compliance</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Only approved connections allowed</span>\n                </div>\n              </div>\n            </Card>\n\n            {/* Governance */}\n            <Card className=\"bg-background border border-muted rounded-xl p-6\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 bg-electric-blue/20 border border-electric-blue rounded-lg flex items-center justify-center\">\n                  <Scale className=\"w-6 h-6 text-electric-blue\" />\n                </div>\n                <h2 className=\"text-xl font-semibold\">Built-in Controls</h2>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Schema versioning controls</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">No prediction without explanation</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Pattern lifecycle management</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Virtual edges only guardrails</span>\n                </div>\n              </div>\n            </Card>\n\n            {/* Reproducibility */}\n            <Card className=\"bg-background border border-muted rounded-xl p-6\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 bg-provenance-purple/20 border border-provenance-purple rounded-lg flex items-center justify-center\">\n                  <History className=\"w-6 h-6 text-provenance-purple\" />\n                </div>\n                <h2 className=\"text-xl font-semibold\">Replay Anything</h2>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Snapshot-exact replay</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Immutable audit trails</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Full provenance tracking</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-sm\">Deterministic replays</span>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* Performance Dashboard */}\n          <div className=\"mt-12\">\n            <PerformanceDashboard />\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5430},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      data-testid=\"toast-notification\"\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4884},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/evidence-drawer.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetClose } from \"@/components/ui/sheet\";\nimport { ExternalLink, Copy, RotateCcw, FileText, Calendar, Shield, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport interface EvidenceSource {\n  id: string;\n  title: string;\n  source: string;\n  url: string;\n  excerpt: string;\n  date: string;\n  confidence: number;\n  type: \"academic\" | \"regulatory\" | \"market_data\" | \"historical\";\n}\n\nexport interface EvidenceContext {\n  title: string;\n  description: string;\n  scenario: string;\n  snapshotId: string;\n  sources: EvidenceSource[];\n  summary: string;\n}\n\ninterface EvidenceDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  context: EvidenceContext | null;\n}\n\nexport default function EvidenceDrawer({ isOpen, onClose, context }: EvidenceDrawerProps) {\n  const { toast } = useToast();\n  const [copiedSnapshotId, setCopiedSnapshotId] = useState(false);\n\n  const handleCopySnapshot = async () => {\n    if (!context) return;\n    \n    const snapshotUrl = `${window.location.origin}/replay/${context.snapshotId}`;\n    \n    try {\n      await navigator.clipboard.writeText(snapshotUrl);\n      setCopiedSnapshotId(true);\n      setTimeout(() => setCopiedSnapshotId(false), 2000);\n      toast({\n        title: \"Replay Link Copied\",\n        description: \"Share this link to replay the exact same analysis\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Unable to copy replay link to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCopySummary = async () => {\n    if (!context) return;\n    \n    const summary = `${context.title}\\n\\n${context.summary}\\n\\nSources:\\n${context.sources.map(s => `• ${s.title} - ${s.source} (${s.date})\\n  ${s.url}`).join('\\n\\n')}`;\n    \n    try {\n      await navigator.clipboard.writeText(summary);\n      toast({\n        title: \"Summary Copied\",\n        description: \"Evidence summary and sources copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Unable to copy summary to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getTypeIcon = (type: EvidenceSource['type']) => {\n    switch (type) {\n      case 'academic': return <FileText className=\"w-4 h-4\" />;\n      case 'regulatory': return <Shield className=\"w-4 h-4\" />;\n      case 'market_data': return <Calendar className=\"w-4 h-4\" />;\n      case 'historical': return <RotateCcw className=\"w-4 h-4\" />;\n      default: return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: EvidenceSource['type']) => {\n    switch (type) {\n      case 'academic': return 'bg-electric-blue/20 text-electric-blue border-electric-blue';\n      case 'regulatory': return 'bg-signal-teal/20 text-signal-teal border-signal-teal';\n      case 'market_data': return 'bg-alert-amber/20 text-alert-amber border-alert-amber';\n      case 'historical': return 'bg-provenance-purple/20 text-provenance-purple border-provenance-purple';\n      default: return 'bg-muted text-muted-foreground border-muted';\n    }\n  };\n\n  if (!context) return null;\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent \n        side=\"right\" \n        className=\"w-full sm:w-[600px] lg:w-[800px] bg-background border-l border-muted\"\n        data-testid=\"sheet-evidence-drawer\"\n      >\n        <SheetHeader className=\"pb-6\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"space-y-2 flex-1\">\n              <SheetTitle className=\"text-xl font-bold text-foreground\">\n                {context.title}\n              </SheetTitle>\n              <p className=\"text-muted-foreground text-sm\">\n                {context.description}\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {context.scenario}\n                </Badge>\n                <Badge \n                  variant=\"outline\" \n                  className=\"text-xs font-mono cursor-pointer hover:bg-muted/50\" \n                  onClick={handleCopySnapshot}\n                >\n                  {copiedSnapshotId ? \"Copied!\" : `#${context.snapshotId}`}\n                </Badge>\n              </div>\n            </div>\n            <SheetClose className=\"p-2 hover:bg-muted rounded-lg transition-colors\">\n              <X className=\"w-4 h-4\" />\n            </SheetClose>\n          </div>\n        </SheetHeader>\n\n        <div className=\"space-y-6\">\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={handleCopySnapshot}\n              variant=\"outline\"\n              className=\"flex-1 border-signal-teal text-signal-teal hover:bg-signal-teal/10\"\n              data-testid=\"button-copy-replay\"\n            >\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              {copiedSnapshotId ? \"Copied!\" : \"Copy Replay Link\"}\n            </Button>\n            <Button\n              onClick={handleCopySummary}\n              variant=\"outline\"\n              className=\"flex-1 border-electric-blue text-electric-blue hover:bg-electric-blue/10\"\n              data-testid=\"button-copy-summary\"\n            >\n              <Copy className=\"w-4 h-4 mr-2\" />\n              Copy Summary\n            </Button>\n          </div>\n\n          {/* Summary */}\n          <Card className=\"bg-card border border-muted rounded-lg p-4\">\n            <h3 className=\"font-semibold mb-3 flex items-center\">\n              <FileText className=\"w-4 h-4 mr-2 text-signal-teal\" />\n              Analysis Summary\n            </h3>\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              {context.summary}\n            </p>\n          </Card>\n\n          {/* Sources */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold flex items-center\">\n              <Shield className=\"w-4 h-4 mr-2 text-signal-teal\" />\n              Evidence Sources ({context.sources.length})\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {context.sources.map((source) => (\n                <Card key={source.id} className=\"bg-card border border-muted rounded-lg p-4 hover:border-signal-teal/30 transition-colors\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground mb-1\">{source.title}</h4>\n                        <div className=\"flex items-center space-x-3 text-xs text-muted-foreground\">\n                          <span>{source.source}</span>\n                          <span>•</span>\n                          <span>{source.date}</span>\n                          <span>•</span>\n                          <span>Confidence: {Math.round(source.confidence * 100)}%</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge \n                          variant=\"outline\" \n                          className={`text-xs ${getTypeColor(source.type)}`}\n                        >\n                          {getTypeIcon(source.type)}\n                          <span className=\"ml-1 capitalize\">{source.type.replace('_', ' ')}</span>\n                        </Badge>\n                        <a\n                          href={source.url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"p-1 hover:bg-muted rounded text-signal-teal hover:text-signal-teal/80 transition-colors\"\n                          data-testid={`link-source-${source.id}`}\n                        >\n                          <ExternalLink className=\"w-4 h-4\" />\n                        </a>\n                      </div>\n                    </div>\n                    \n                    <blockquote className=\"text-sm text-muted-foreground italic pl-4 border-l-2 border-muted\">\n                      \"{source.excerpt}\"\n                    </blockquote>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div className=\"pt-4 border-t border-muted\">\n            <p className=\"text-xs text-muted-foreground text-center\">\n              All sources independently verified • Analysis reproducible via snapshot link\n            </p>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}","size_bytes":8827},"client/src/components/performance-dashboard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\n\nexport default function PerformanceDashboard() {\n  return (\n    <Card className=\"bg-background border border-muted rounded-xl p-8\">\n      <h3 className=\"text-xl font-semibold mb-6 text-center\">Performance Promises</h3>\n      <p className=\"text-muted-foreground text-center mb-8\">These are our guarantees to you. If we don't meet them, something needs fixing.</p>\n      \n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-signal-teal mb-1\" data-testid=\"text-uptime-percentage\">99.97%</div>\n          <div className=\"text-sm font-medium mb-1\">System Available</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: 99.9% uptime</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-signal-teal h-2 rounded-full\" style={{ width: \"99.97%\" }}></div>\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-electric-blue mb-1\" data-testid=\"text-traversal-p95\">8.3s</div>\n          <div className=\"text-sm font-medium mb-1\">Shock Path Speed</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: Under 10s, 95% of time</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-electric-blue h-2 rounded-full\" style={{ width: \"83%\" }}></div>\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-provenance-purple mb-1\" data-testid=\"text-alert-e2e\">1.8m</div>\n          <div className=\"text-sm font-medium mb-1\">Alert Speed</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: Notify you within 2 min</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-provenance-purple h-2 rounded-full\" style={{ width: \"90%\" }}></div>\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-3\">\n          <div className=\"font-mono text-2xl font-bold text-green-400 mb-1\" data-testid=\"text-ece-score\">0.03</div>\n          <div className=\"text-sm font-medium mb-1\">Confidence Accuracy</div>\n          <div className=\"text-xs text-muted-foreground mb-2\">Promise: Stay below 0.05 error</div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className=\"bg-green-400 h-2 rounded-full\" style={{ width: \"94%\" }}></div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"text-center mt-8\">\n        <span className=\"text-sm text-green-400 font-medium\">✓ All promises kept</span>\n        <p className=\"text-xs text-muted-foreground mt-2\">Mission-critical performance you can count on</p>\n      </div>\n\n      {/* Detailed Explanations */}\n      <div className=\"mt-8 grid md:grid-cols-2 gap-6 pt-8 border-t border-muted\">\n        <div>\n          <h4 className=\"font-semibold mb-2 text-electric-blue\">Shock Path Speed</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            When you ask \"show me how this shock spreads,\" how long does it take to map the full path?\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            You need answers fast when markets are moving. No one wants to wait 30 seconds to see if their portfolio is about to get hit.\n          </p>\n        </div>\n        \n        <div>\n          <h4 className=\"font-semibold mb-2 text-provenance-purple\">Alert Speed</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            From the moment a new shock happens until you get notified about potential impacts to your positions.\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            In fast-moving markets, being 5 minutes late with a critical alert could cost millions. This guarantees you're always in the first wave.\n          </p>\n        </div>\n\n        <div>\n          <h4 className=\"font-semibold mb-2 text-green-400\">Confidence Accuracy</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            How honest the confidence scores are. If DawsOS says \"90% confident,\" is it right 90% of the time?\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            If the system says \"85% chance this bank gets hit next,\" you need to trust that number for position sizing and risk decisions.\n          </p>\n        </div>\n\n        <div>\n          <h4 className=\"font-semibold mb-2 text-signal-teal\">System Available</h4>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            The percentage of time DawsOS is running and ready when you need it.\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            When markets are in crisis, the platform needs to be there. This measures our reliability promise to you.\n          </p>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5034},"client/src/pages/about.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Users, Target, Shield, Zap, Globe, Heart } from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <div className=\"pt-16\">\n      {/* Hero Section */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">About DawsOS</h1>\n            <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">\n              DawsOS is a modern operating layer for organizations—connecting data, decisions, and day-to-day execution so teams can move faster with confidence.\n            </p>\n          </div>\n\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <p className=\"text-lg text-foreground mb-6\">\n              We blend institutional-grade financial discipline with practical, on-the-ground operations to turn strategy into repeatable results.\n            </p>\n            <p className=\"text-muted-foreground\">\n              From the first workflow to your thousandth user, DawsOS gives you a single place to orchestrate processes, measure impact, and continuously improve—without adding complexity.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Vision Section */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Our Vision</h2>\n          </div>\n\n          <Card className=\"bg-card border border-muted rounded-2xl p-8 max-w-4xl mx-auto\">\n            <p className=\"text-lg text-foreground leading-relaxed\">\n              We believe every organization deserves an \"OS\" that makes excellence the default: decisions grounded in data, governance built-in, and workflows that are simple for people to follow. DawsOS exists to bring the best of enterprise-level rigor to growing teams, so they can scale responsibly, serve their communities, and stay resilient through change. We're building tools that are transparent, interoperable, and human-centered—because great systems should feel effortless.\n            </p>\n          </Card>\n        </div>\n      </section>\n\n      {/* Founders Section */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Our Founders</h2>\n            <p className=\"text-muted-foreground text-lg\">\n              Led by experienced finance and operations executives\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            {/* Michael Dawson */}\n            <Card className=\"bg-background border border-muted rounded-xl p-8\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-20 h-20 bg-signal-teal/20 border border-signal-teal rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"w-10 h-10 text-signal-teal\" />\n                </div>\n                <h3 className=\"text-xl font-bold mb-2\">Michael Dawson</h3>\n                <p className=\"text-muted-foreground font-medium\">Co-founder</p>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  Michael is Chief Financial Officer at a growth-oriented pension fund where he led the organization through rapid scaling from 80 to 600 people, overseeing Finance, Strategy Execution, Technology, Risk and Audit functions. A technologist and philosopher at heart, he helped lead the development of in-house systems using the latest AI techniques—bringing two decades of experience where technology, risk and finance are in his core DNA.\n                </p>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  Previously, he held senior roles at the world's largest asset manager and a leading professional services firm, and served as Treasurer and Director for the Adoption Council of Ontario. He is a CPA, CA and a CFA charterholder.\n                </p>\n              </div>\n            </Card>\n\n            {/* Andrew Murphy */}\n            <Card className=\"bg-background border border-muted rounded-xl p-8\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-20 h-20 bg-electric-blue/20 border border-electric-blue rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Target className=\"w-10 h-10 text-electric-blue\" />\n                </div>\n                <h3 className=\"text-xl font-bold mb-2\">Andrew Murphy</h3>\n                <p className=\"text-muted-foreground font-medium\">Co-founder</p>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  Andrew is an operator and finance leader focused on building durable, people-first organizations. He currently serves as Chief Operating Officer at WeatherLok Metal Roofing System.\n                </p>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  Previously, he spent eight years at BMO in Corporate Finance, Senior/Upper Mid-Market analysis, and Business Banking. Andrew holds an MBA from Smith School of Business at Queen's University and is active in community initiatives and volunteer work.\n                </p>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">What We Stand For</h2>\n            <p className=\"text-muted-foreground text-lg\">\n              Our core principles guide every decision we make\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-signal-teal/30 transition-all\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Shield className=\"w-6 h-6 text-signal-teal\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Rigor by default</h3>\n                  <p className=\"text-sm text-muted-foreground\">Financial discipline and clear governance, built into the product experience.</p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-electric-blue/30 transition-all\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-electric-blue/20 border border-electric-blue rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Zap className=\"w-6 h-6 text-electric-blue\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Practical first</h3>\n                  <p className=\"text-sm text-muted-foreground\">Tools should reduce steps, not add them.</p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-provenance-purple/30 transition-all\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-provenance-purple/20 border border-provenance-purple rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Heart className=\"w-6 h-6 text-provenance-purple\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Human-centered</h3>\n                  <p className=\"text-sm text-muted-foreground\">Designed for real teams, not just PowerPoints.</p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-alert-amber/30 transition-all\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-alert-amber/20 border border-alert-amber rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Globe className=\"w-6 h-6 text-alert-amber\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Open & interoperable</h3>\n                  <p className=\"text-sm text-muted-foreground\">Connect your data, don't silo it.</p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-card border border-muted rounded-xl p-6 hover:border-signal-teal/30 transition-all\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Shield className=\"w-6 h-6 text-signal-teal\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Security from day one</h3>\n                  <p className=\"text-sm text-muted-foreground\">Trust is a feature, not an afterthought.</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9712},"client/src/pages/careers.tsx":{"content":"\nimport { Card } from \"@/components/ui/card\";\nimport { Bot, Users, Shield, Code, Zap, ArrowRight } from \"lucide-react\";\n\nexport default function Careers() {\n  return (\n    <div className=\"pt-16\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Careers at <span className=\"text-signal-teal\">DawsOS</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground leading-relaxed\">\n              Building the future of work where AI agents and human experts collaborate seamlessly\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Agent-First Architecture */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Agent-First Job Architecture</h2>\n            <p className=\"text-muted-foreground max-w-3xl mx-auto\">\n              At DawsOS, we are building an agent-first job architecture: every project and workflow is powered by a mesh of specialized AI agents working side by side with human experts.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-5xl mx-auto\">\n            <Card className=\"bg-background border border-muted rounded-xl p-6\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center\">\n                  <Code className=\"w-6 h-6 text-signal-teal\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-2\">Claude Code Agents</h3>\n                  <p className=\"text-muted-foreground\">\n                    Handle implementation tasks — writing, testing, and refactoring code with precision and consistency.\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-background border border-muted rounded-xl p-6\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-electric-blue/20 border border-electric-blue rounded-lg flex items-center justify-center\">\n                  <Zap className=\"w-6 h-6 text-electric-blue\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-2\">Business Process Agents</h3>\n                  <p className=\"text-muted-foreground\">\n                    Powered by n8n, these agents automate operations, customer onboarding, billing, and incident runbooks.\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-background border border-muted rounded-xl p-6\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-provenance-purple/20 border border-provenance-purple rounded-lg flex items-center justify-center\">\n                  <Bot className=\"w-6 h-6 text-provenance-purple\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-2\">GitHub Copilot Integration</h3>\n                  <p className=\"text-muted-foreground\">\n                    Translates product and project plans into executable tasks, bridging strategy and implementation.\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"bg-background border border-muted rounded-xl p-6\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-alert-amber/20 border border-alert-amber rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-6 h-6 text-alert-amber\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-2\">ChatGPT Governance Agents</h3>\n                  <p className=\"text-muted-foreground\">\n                    Provide oversight, policy guidance, and explainability for every change across the system.\n                  </p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Roles Section */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Roles in an Agent-First World</h2>\n            <p className=\"text-muted-foreground max-w-3xl mx-auto\">\n              In this model, \"roles\" are no longer only job titles — they're composable jobs where humans and agents share responsibilities\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6 max-w-5xl mx-auto\">\n            <div className=\"space-y-6\">\n              <Card className=\"bg-card border border-muted rounded-xl p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-signal-teal/20 border border-signal-teal rounded-lg flex items-center justify-center\">\n                    <Code className=\"w-5 h-5 text-signal-teal\" />\n                  </div>\n                  <h3 className=\"font-semibold text-lg\">Engineering Agents</h3>\n                </div>\n                <p className=\"text-muted-foreground\">\n                  Handle pull requests, test scaffolding, migrations, and release rollouts with automated precision.\n                </p>\n              </Card>\n\n              <Card className=\"bg-card border border-muted rounded-xl p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-electric-blue/20 border border-electric-blue rounded-lg flex items-center justify-center\">\n                    <Zap className=\"w-5 h-5 text-electric-blue\" />\n                  </div>\n                  <h3 className=\"font-semibold text-lg\">Operations Agents</h3>\n                </div>\n                <p className=\"text-muted-foreground\">\n                  Run financial reconciliations, manage feature flag rollouts, and execute incident workflows.\n                </p>\n              </Card>\n            </div>\n\n            <div className=\"space-y-6\">\n              <Card className=\"bg-card border border-muted rounded-xl p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-alert-amber/20 border border-alert-amber rounded-lg flex items-center justify-center\">\n                    <Shield className=\"w-5 h-5 text-alert-amber\" />\n                  </div>\n                  <h3 className=\"font-semibold text-lg\">Governance Agents</h3>\n                </div>\n                <p className=\"text-muted-foreground\">\n                  Ensure security, compliance, and policy adherence before any change goes live.\n                </p>\n              </Card>\n\n              <Card className=\"bg-card border border-muted rounded-xl p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-provenance-purple/20 border border-provenance-purple rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-5 h-5 text-provenance-purple\" />\n                  </div>\n                  <h3 className=\"font-semibold text-lg\">Human Specialists</h3>\n                </div>\n                <p className=\"text-muted-foreground\">\n                  Guide strategy, validate critical decisions, and design new workflows that agents execute.\n                </p>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Join Us Soon */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <Card className=\"bg-background border border-muted rounded-2xl p-12 text-center max-w-4xl mx-auto\">\n            <div className=\"w-16 h-16 bg-signal-teal/20 border border-signal-teal rounded-full flex items-center justify-center mx-auto mb-6\">\n              <ArrowRight className=\"w-8 h-8 text-signal-teal\" />\n            </div>\n            \n            <h2 className=\"text-3xl font-bold mb-6\">Join Us Soon</h2>\n            \n            <div className=\"space-y-4 text-left max-w-2xl mx-auto\">\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We are ramping up the business and expanding our team. Career opportunities will soon be published here — spanning engineering, operations, product, governance, and agent-ops design.\n              </p>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Stay tuned: we'll be posting open roles and more detailed information about how you can help shape the future of agent-first operations at DawsOS.\n              </p>\n            </div>\n\n            <div className=\"mt-8\">\n              <button \n                className=\"bg-signal-teal hover:bg-signal-teal/90 text-white px-8 py-3 rounded-lg font-semibold transition-all transform hover:scale-105\"\n                data-testid=\"button-notify-careers\"\n              >\n                Get Notified About Opportunities\n              </button>\n            </div>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":9497},"governance/README.md":{"content":"# DawsOS Governance Documentation\n\nThis governance folder contains architectural standards, patterns, and guidelines to ensure consistency, maintainability, and security across the DawsOS web application.\n\n## Document Overview\n\n- **[Architecture](./architecture.md)** - High-level application architecture and system design\n- **[UI Patterns](./ui-patterns.md)** - Design system, component usage, and visual consistency\n- **[Forms](./forms.md)** - Form handling patterns and validation standards\n- **[Routing & Navigation](./routing-and-nav.md)** - Navigation patterns and SEO requirements\n- **[Data & API](./data-and-api.md)** - Data schemas, API patterns, and backend architecture\n- **[Theming](./theming.md)** - Dark mode implementation and design tokens\n- **[Testing & Accessibility](./testing-and-accessibility.md)** - Testing patterns and accessibility standards\n- **[Security & Logging](./security-and-logging.md)** - Security practices and logging governance\n- **[Performance & Assets](./performance-and-assets.md)** - Performance optimization and asset management\n\n## Governance Principles\n\n1. **Consistency** - All patterns must be followed consistently across the application\n2. **Maintainability** - Code should be easy to understand, modify, and extend\n3. **Security** - Security must be built into every pattern and practice\n4. **Accessibility** - All UI must be accessible by default\n5. **Performance** - Optimize for user experience and loading times\n6. **Developer Experience** - Patterns should make development faster and more reliable\n\n## Enforcement\n\nThese governance documents are not suggestions - they are requirements that must be followed for all new code and should be applied retroactively to existing code during maintenance cycles.\n\nAll pull requests must adhere to these standards before merging.","size_bytes":1826},"governance/architecture.md":{"content":"# Application Architecture\n\n## Overview\n\nDawsOS is a full-stack JavaScript application built with modern web technologies, following an agent-first architecture where AI agents and human experts collaborate seamlessly.\n\n## Tech Stack\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter (lightweight React router)\n- **State Management**: TanStack React Query for server state\n- **UI Framework**: shadcn/ui + Tailwind CSS\n- **Build Tool**: Vite\n- **Animations**: Framer Motion\n\n### Backend\n- **Runtime**: Node.js with TypeScript\n- **Framework**: Express.js\n- **Database**: PostgreSQL with Drizzle ORM\n- **Storage Interface**: In-memory storage (MemStorage) for development\n- **Session Management**: Express sessions with PostgreSQL store\n\n### Development\n- **Package Manager**: npm\n- **Type Safety**: TypeScript across frontend and backend\n- **Validation**: Zod schemas shared between frontend and backend\n- **Development Server**: Vite dev server with Express API\n\n## Application Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Page components for routing\n│   │   ├── lib/           # Utilities and configurations\n│   │   └── index.css      # Global styles and Tailwind\n├── server/                # Backend Express application\n│   ├── index.ts          # Server entry point\n│   ├── routes.ts         # API route definitions\n│   ├── storage.ts        # Storage interface and implementations\n│   └── vite.ts           # Vite integration for development\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # Drizzle schemas and Zod validations\n└── governance/           # Architecture and pattern documentation\n```\n\n## Data Flow\n\n### Frontend → Backend\n1. User interactions trigger React components\n2. Forms use react-hook-form with Zod validation\n3. TanStack React Query handles API calls\n4. API requests go to Express routes at `/api/*`\n\n### Backend Processing\n1. Express routes receive requests\n2. Zod schemas validate request bodies\n3. Storage interface handles data persistence\n4. Responses return with consistent error handling\n\n### Frontend Updates\n1. React Query caches and manages server state\n2. Mutations trigger cache invalidation\n3. UI updates reactively based on state changes\n\n## Security Architecture\n\n- Input validation at both frontend (UX) and backend (security)\n- Type-safe APIs with shared Zod schemas\n- Session-based authentication (when implemented)\n- No sensitive data in frontend builds\n- Secure headers and CORS configuration\n\n## Deployment Architecture\n\n- Single port (5000) serves both frontend and API\n- Vite handles frontend bundling and development server\n- Express serves static files in production\n- Environment variables for configuration\n- Automatic HTTPS and health checks via Replit deployment\n\n## Performance Considerations\n\n- Code splitting with React lazy loading\n- Optimistic updates with React Query\n- Efficient re-renders with proper React patterns\n- Tailwind CSS purging for minimal bundle size\n- Image optimization and lazy loading","size_bytes":3258},"governance/data-and-api.md":{"content":"# Data and API Patterns\n\n## Schema Ownership\n\n**Single Source of Truth**: All data schemas are defined in `shared/schema.ts`\n**Framework**: Drizzle ORM with PostgreSQL\n**Validation**: Zod schemas for runtime validation\n\n## Schema Definition Pattern\n\n```tsx\nimport { pgTable, text, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Database table definition\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Zod schemas for validation\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const selectContactMessageSchema = createSelectSchema(contactMessages);\n\n// TypeScript types\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type SelectContactMessage = typeof contactMessages.$inferSelect;\n```\n\n## API Route Patterns\n\n### Route Organization\nAll API routes defined in `server/routes.ts` with consistent patterns:\n\n```tsx\nimport { Router } from \"express\";\nimport { z } from \"zod\";\nimport { insertContactMessageSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: express.Application) {\n  const router = Router();\n\n  // POST endpoint with validation\n  router.post(\"/contact-messages\", async (req, res) => {\n    try {\n      // Validate request body\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      \n      // Use storage interface\n      const result = await storage.createContactMessage(validatedData);\n      \n      res.json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Internal server error\" });\n      }\n    }\n  });\n\n  app.use(\"/api\", router);\n}\n```\n\n### Thin Routes Principle\nRoutes should be thin wrappers that:\n1. Validate input with Zod schemas\n2. Call storage interface methods\n3. Handle errors consistently\n4. Return standardized responses\n\n### Storage Interface Pattern\n\nAll data operations go through storage interface in `server/storage.ts`:\n\n```tsx\nexport interface IStorage {\n  // Contact messages\n  createContactMessage(data: InsertContactMessage): Promise<SelectContactMessage>;\n  getContactMessages(): Promise<SelectContactMessage[]>;\n  \n  // Demo requests\n  createDemoRequest(data: InsertDemoRequest): Promise<SelectDemoRequest>;\n  getDemoRequests(): Promise<SelectDemoRequest[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private contactMessages: SelectContactMessage[] = [];\n  private nextContactId = 1;\n\n  async createContactMessage(data: InsertContactMessage): Promise<SelectContactMessage> {\n    const contactMessage: SelectContactMessage = {\n      id: this.nextContactId++,\n      ...data,\n      createdAt: new Date(),\n    };\n    \n    this.contactMessages.push(contactMessage);\n    return contactMessage;\n  }\n\n  async getContactMessages(): Promise<SelectContactMessage[]> {\n    return [...this.contactMessages];\n  }\n}\n```\n\n## Frontend API Integration\n\n### Query Client Setup\nCentralized API configuration in `client/src/lib/queryClient.ts`:\n\n```tsx\nimport { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const response = await fetch(queryKey[0] as string);\n        if (!response.ok) throw new Error(\"Network response was not ok\");\n        return response.json();\n      },\n    },\n  },\n});\n\nexport async function apiRequest<T>(\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n  url: string,\n  data?: any\n): Promise<T> {\n  const response = await fetch(url, {\n    method,\n    headers: { \"Content-Type\": \"application/json\" },\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  if (!response.ok) throw new Error(`API request failed: ${response.statusText}`);\n  return response.json();\n}\n```\n\n### Query Patterns\nUse consistent query patterns:\n\n```tsx\n// Queries (GET requests)\nconst { data, isLoading, error } = useQuery({\n  queryKey: [\"/api/contact-messages\"],\n  // queryFn provided by default queryClient setup\n});\n\n// Mutations (POST/PUT/DELETE requests)\nconst mutation = useMutation({\n  mutationFn: async (data: InsertContactMessage) => {\n    return await apiRequest(\"POST\", \"/api/contact-messages\", data);\n  },\n  onSuccess: () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/contact-messages\"] });\n  },\n});\n```\n\n### Cache Invalidation Strategy\nUse hierarchical query keys for efficient cache invalidation:\n\n```tsx\n// ✅ Good: Hierarchical keys\nqueryKey: [\"/api/contact-messages\"]\nqueryKey: [\"/api/contact-messages\", id]\n\n// ❌ Bad: Flat string keys\nqueryKey: [`/api/contact-messages/${id}`]\n```\n\n## Error Handling\n\n### API Error Responses\nStandardized error response format:\n\n```tsx\n// Validation errors\n{\n  error: \"Validation failed\",\n  details: [\n    { path: [\"email\"], message: \"Invalid email format\" }\n  ]\n}\n\n// Server errors\n{\n  error: \"Internal server error\",\n  message: \"Description of what went wrong\"\n}\n```\n\n### Frontend Error Handling\n```tsx\nconst mutation = useMutation({\n  mutationFn: apiCall,\n  onError: (error) => {\n    toast({\n      title: \"Error\",\n      description: error.message || \"Something went wrong\",\n      variant: \"destructive\",\n    });\n  },\n});\n```\n\n## Naming Conventions\n\n### API Endpoints\n- RESTful patterns: `/api/contact-messages`, `/api/demo-requests`\n- Plural nouns for collections\n- Kebab-case for multi-word resources\n\n### Schema Names\n- Table names: `snake_case` (e.g., `contact_messages`)\n- Schema names: `camelCase` with descriptive prefixes (e.g., `insertContactMessageSchema`)\n- Type names: `PascalCase` (e.g., `InsertContactMessage`)\n\n### Storage Methods\n- CRUD operations: `create`, `get`, `update`, `delete`\n- Descriptive names: `createContactMessage`, `getContactMessages`\n\n## Semantic Alignment\n\nEnsure semantic consistency between frontend and backend:\n\n```tsx\n// ✅ Correct alignment\n// Demo booking form → /api/demo-requests → insertDemoRequestSchema\n// Contact form → /api/contact-messages → insertContactMessageSchema\n\n// ❌ Wrong alignment  \n// Demo form posting to contact-messages endpoint\n```\n\n## Type Safety\n\n### Shared Types\nImport types from shared schema:\n```tsx\nimport { type InsertContactMessage, type SelectContactMessage } from \"@shared/schema\";\n```\n\n### API Response Typing\nType API responses for better developer experience:\n```tsx\nconst { data } = useQuery<SelectContactMessage[]>({\n  queryKey: [\"/api/contact-messages\"],\n});\n```\n\n## Performance Optimization\n\n### Query Optimization\n- Use React Query's built-in caching\n- Implement optimistic updates for better UX\n- Batch related queries when possible\n\n### Data Fetching\n- Fetch data close to where it's used\n- Use loading states consistently\n- Implement error boundaries for graceful degradation","size_bytes":7167},"governance/forms.md":{"content":"# Forms and Data Handling\n\n## Form Implementation Standard\n\n**Required**: All forms MUST use the following pattern:\n1. shadcn/ui `Form` component (wraps react-hook-form)\n2. `react-hook-form` for form state management\n3. `zodResolver` for validation with shared schemas\n4. TanStack React Query mutations for submission\n\n## Standard Form Pattern\n\n```tsx\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertContactMessageSchema, type InsertContactMessage } from \"@shared/schema\";\n\nexport function ContactForm() {\n  const form = useForm<InsertContactMessage>({\n    resolver: zodResolver(insertContactMessageSchema),\n    defaultValues: {\n      email: \"\",\n      message: \"\",\n      role: \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertContactMessage) => {\n      return await apiRequest(\"POST\", \"/api/contact-messages\", data);\n    },\n    onSuccess: () => {\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/contact-messages\"] });\n      form.reset();\n    },\n  });\n\n  const onSubmit = (data: InsertContactMessage) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input \n                  {...field} \n                  type=\"email\"\n                  data-testid=\"input-email\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <Button \n          type=\"submit\" \n          disabled={mutation.isPending}\n          data-testid=\"button-submit\"\n        >\n          {mutation.isPending ? \"Submitting...\" : \"Submit\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n```\n\n## Schema Extension for Validation\n\nUse `.extend()` to add frontend-specific validation rules:\n\n```tsx\nconst formSchema = insertContactMessageSchema.extend({\n  email: z.string().email(\"Please enter a valid email address\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n```\n\n## Form State Management\n\n### Default Values\nAlways provide default values to prevent uncontrolled component warnings:\n```tsx\nconst form = useForm({\n  defaultValues: {\n    email: \"\",\n    role: \"\",\n    message: \"\",\n  },\n});\n```\n\n### Loading States\nShow loading states during form submission:\n```tsx\n<Button \n  type=\"submit\" \n  disabled={mutation.isPending}\n  data-testid=\"button-submit\"\n>\n  {mutation.isPending ? \"Submitting...\" : \"Submit\"}\n</Button>\n```\n\n### Error Handling\nDisplay form errors using `FormMessage` component:\n```tsx\n<FormMessage /> // Shows field-specific errors\n```\n\nFor global form errors:\n```tsx\n{mutation.error && (\n  <div className=\"text-destructive text-sm\">\n    Failed to submit form. Please try again.\n  </div>\n)}\n```\n\n## Cache Invalidation\n\nAlways invalidate relevant queries after successful mutations:\n```tsx\nonSuccess: () => {\n  // Invalidate specific query\n  queryClient.invalidateQueries({ queryKey: [\"/api/contact-messages\"] });\n  \n  // Or invalidate multiple related queries\n  queryClient.invalidateQueries({ queryKey: [\"/api/contact-messages\"] });\n  queryClient.invalidateQueries({ queryKey: [\"/api/demo-requests\"] });\n},\n```\n\n## Form Validation Patterns\n\n### Client-Side Validation\nUse Zod schemas for immediate feedback:\n```tsx\nemail: z.string().email(\"Please enter a valid email address\")\npassword: z.string().min(8, \"Password must be at least 8 characters\")\n```\n\n### Server-Side Validation\nBackend must validate using the same Zod schemas:\n```tsx\n// In API routes\nconst validatedData = insertContactMessageSchema.parse(req.body);\n```\n\n## Forbidden Patterns\n\n❌ **Manual form state with useState**\n```tsx\n// Don't do this\nconst [email, setEmail] = useState(\"\");\nconst [errors, setErrors] = useState({});\n```\n\n❌ **Direct form submission without react-hook-form**\n```tsx\n// Don't do this\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  // Manual form handling\n};\n```\n\n❌ **Missing validation or default values**\n```tsx\n// Don't do this\nconst form = useForm(); // Missing resolver and defaultValues\n```\n\n## Data Test IDs for Forms\n\nRequired test IDs for all form elements:\n- Inputs: `input-{fieldname}` (e.g., `input-email`, `input-password`)\n- Selects: `select-{fieldname}` (e.g., `select-role`, `select-country`)\n- Buttons: `button-{action}` (e.g., `button-submit`, `button-cancel`)\n- Error messages: `error-{fieldname}` (when custom error display)\n\n## Semantic API Alignment\n\nEnsure form purpose matches API endpoint:\n- Demo requests → `/api/demo-requests` with `insertDemoRequestSchema`\n- Contact messages → `/api/contact-messages` with `insertContactMessageSchema`\n- Never mix semantics (demo form posting to contact endpoint)","size_bytes":5300},"governance/performance-and-assets.md":{"content":"# Performance and Assets\n\n## Performance Standards\n\n### Core Web Vitals Targets\n- **Largest Contentful Paint (LCP)**: < 2.5 seconds\n- **First Input Delay (FID)**: < 100 milliseconds  \n- **Cumulative Layout Shift (CLS)**: < 0.1\n- **First Contentful Paint (FCP)**: < 1.8 seconds\n\n### Bundle Size Management\n\n#### Code Splitting Thresholds\n- Individual component chunks: < 50KB gzipped\n- Route-based chunks: < 200KB gzipped\n- Vendor chunks: < 500KB gzipped\n- Total initial bundle: < 250KB gzipped\n\n#### Lazy Loading Implementation\n```tsx\n// Route-based code splitting\nimport { lazy, Suspense } from \"react\";\n\nconst Pricing = lazy(() => import(\"@/pages/pricing\"));\nconst About = lazy(() => import(\"@/pages/about\"));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n        <Route path=\"/pricing\" component={Pricing} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </Suspense>\n  );\n}\n```\n\n#### Component Lazy Loading\n```tsx\n// Heavy component lazy loading\nconst CausalPathDemo = lazy(() => import(\"@/components/causal-path-demo\"));\n\nfunction HomePage() {\n  return (\n    <div>\n      {showDemo && (\n        <Suspense fallback={<div>Loading demo...</div>}>\n          <CausalPathDemo />\n        </Suspense>\n      )}\n    </div>\n  );\n}\n```\n\n## Asset Management\n\n### Image Optimization\n\n#### Image Guidelines\n- **Format**: WebP with JPEG fallback\n- **Compression**: 80-85% quality for photos, lossless for graphics\n- **Responsive**: Multiple sizes using srcset\n- **Lazy Loading**: Below-the-fold images only\n\n#### Implementation Pattern\n```tsx\n// Responsive image with lazy loading\n<img\n  src={imagePath}\n  srcSet={`\n    ${imagePathSmall} 480w,\n    ${imagePathMedium} 768w,\n    ${imagePathLarge} 1200w\n  `}\n  sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n  alt=\"Descriptive alt text\"\n  loading=\"lazy\"\n  data-testid=\"img-hero-illustration\"\n/>\n```\n\n#### Asset Import Pattern\n```tsx\n// Static asset imports with Vite\nimport heroImage from \"@assets/hero-illustration.webp\";\nimport heroImageFallback from \"@assets/hero-illustration.jpg\";\n\n// Dynamic asset loading\nconst loadImage = async (imageName: string) => {\n  const module = await import(`@assets/${imageName}.webp`);\n  return module.default;\n};\n```\n\n### Font Optimization\n\n#### Font Loading Strategy\n```css\n/* client/src/index.css */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  font-display: swap; /* Ensure text remains visible during font load */\n  src: url('@assets/fonts/inter-regular.woff2') format('woff2');\n}\n\n/* Preload critical fonts */\n<link rel=\"preload\" href=\"/fonts/inter-regular.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n```\n\n#### Variable Font Usage\n```css\n/* Use variable fonts for better performance */\n:root {\n  --font-sans: 'Inter Variable', ui-sans-serif, system-ui;\n  --font-mono: 'JetBrains Mono Variable', ui-monospace;\n}\n```\n\n## React Performance\n\n### Component Optimization\n\n#### Memoization Patterns\n```tsx\nimport { memo, useMemo, useCallback } from \"react\";\n\n// Memoize expensive components\nconst ExpensiveComponent = memo(function ExpensiveComponent({ data, onUpdate }) {\n  const processedData = useMemo(() => {\n    return heavyComputation(data);\n  }, [data]);\n\n  const handleClick = useCallback((id: string) => {\n    onUpdate(id);\n  }, [onUpdate]);\n\n  return <div>{/* Component content */}</div>;\n});\n\n// Memoize context values\nconst ThemeContext = createContext();\n\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(\"light\");\n  \n  const value = useMemo(() => ({\n    theme,\n    setTheme,\n    toggleTheme: () => setTheme(t => t === \"light\" ? \"dark\" : \"light\")\n  }), [theme]);\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n```\n\n#### Virtual Scrolling for Large Lists\n```tsx\n// For lists with > 100 items\nimport { FixedSizeList as List } from \"react-window\";\n\nfunction LargeList({ items }) {\n  const Row = ({ index, style }) => (\n    <div style={style} data-testid={`list-item-${index}`}>\n      {items[index].name}\n    </div>\n  );\n\n  return (\n    <List\n      height={600}\n      itemCount={items.length}\n      itemSize={50}\n      width=\"100%\"\n    >\n      {Row}\n    </List>\n  );\n}\n```\n\n### State Management Performance\n\n#### React Query Optimization\n```tsx\n// Optimized query configuration\nconst { data, isLoading } = useQuery({\n  queryKey: [\"/api/contact-messages\"],\n  staleTime: 5 * 60 * 1000, // 5 minutes\n  cacheTime: 10 * 60 * 1000, // 10 minutes\n  refetchOnWindowFocus: false,\n  retry: (failureCount, error) => {\n    if (error.status === 404) return false;\n    return failureCount < 3;\n  },\n});\n\n// Optimistic updates for better UX\nconst mutation = useMutation({\n  mutationFn: updateContactMessage,\n  onMutate: async (newData) => {\n    // Cancel outgoing refetches\n    await queryClient.cancelQueries({ queryKey: [\"/api/contact-messages\"] });\n    \n    // Snapshot previous value\n    const previousData = queryClient.getQueryData([\"/api/contact-messages\"]);\n    \n    // Optimistically update\n    queryClient.setQueryData([\"/api/contact-messages\"], old => \n      old ? [...old, { ...newData, id: \"temp-id\" }] : [newData]\n    );\n    \n    return { previousData };\n  },\n  onError: (err, newData, context) => {\n    // Rollback on error\n    queryClient.setQueryData([\"/api/contact-messages\"], context.previousData);\n  },\n  onSettled: () => {\n    // Refetch after mutation\n    queryClient.invalidateQueries({ queryKey: [\"/api/contact-messages\"] });\n  },\n});\n```\n\n## CSS Performance\n\n### Tailwind Optimization\n\n#### Purge Configuration\n```typescript\n// tailwind.config.ts\nexport default {\n  content: [\n    \"./client/index.html\",\n    \"./client/src/**/*.{js,jsx,ts,tsx}\",\n    // Only include files that actually use Tailwind\n  ],\n  // Remove unused utilities\n  safelist: [\n    // Only safelist actually dynamic classes\n    \"text-signal-teal\",\n    \"text-electric-blue\",\n    \"text-provenance-purple\",\n  ],\n} satisfies Config;\n```\n\n#### CSS Bundle Analysis\n```bash\n# Analyze CSS bundle size\nnpx tailwindcss -i ./src/index.css -o ./dist/output.css --minify\nls -la ./dist/output.css\n\n# Expected target: < 50KB minified\n```\n\n### Critical CSS\n\n#### Above-the-fold Optimization\n```css\n/* Inline critical CSS for above-the-fold content */\n.hero-section {\n  /* Critical styles only */\n  display: flex;\n  min-height: 100vh;\n}\n\n/* Non-critical CSS loaded asynchronously */\n```\n\n## Monitoring and Measurement\n\n### Performance Metrics Collection\n```tsx\n// client/src/lib/performance.ts\nexport function measureWebVitals() {\n  if (typeof window !== \"undefined\") {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(console.log);\n      getFID(console.log);\n      getFCP(console.log);\n      getLCP(console.log);\n      getTTFB(console.log);\n    });\n  }\n}\n\n// In main.tsx\nmeasureWebVitals();\n```\n\n### Bundle Analysis\n```bash\n# Analyze bundle composition\nnpm run build\nnpx vite-bundle-analyzer dist\n\n# Expected thresholds:\n# - React + ReactDOM: ~45KB gzipped\n# - TanStack Query: ~15KB gzipped\n# - Tailwind CSS: ~50KB gzipped\n# - Application code: ~100KB gzipped\n```\n\n## Component Library Cleanup\n\n### shadcn/ui Audit Process\n\n#### Monthly Cleanup Checklist\n1. **Identify unused components**:\n   ```bash\n   # Search for component imports\n   grep -r \"from \\\"@/components/ui/\" client/src/\n   \n   # Compare with installed components\n   ls client/src/components/ui/\n   ```\n\n2. **Remove unused dependencies**:\n   ```bash\n   # Remove unused Radix packages\n   npm uninstall @radix-ui/react-unused-component\n   \n   # Remove unused component files\n   rm client/src/components/ui/unused-component.tsx\n   ```\n\n3. **Update documentation**:\n   - Remove from ui-patterns.md\n   - Update import examples\n   - Revise component guidelines\n\n#### Current Cleanup Candidates\nBased on codebase analysis, consider removing:\n- Unused carousel components\n- Redundant date picker variants\n- Excessive chart components (if not used)\n- Duplicate dialog/modal components\n\n### Tree Shaking Validation\n```typescript\n// Ensure proper tree shaking\nimport { Button } from \"@/components/ui/button\"; // ✅ Specific import\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"; // ✅ Named imports\n\n// Avoid barrel imports for large libraries\nimport * as LucideIcons from \"lucide-react\"; // ❌ Imports entire library\nimport { ArrowRight, Shield } from \"lucide-react\"; // ✅ Tree-shakeable\n```\n\n## Caching Strategy\n\n### Static Asset Caching\n```typescript\n// vite.config.ts\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      output: {\n        // Cache busting for assets\n        assetFileNames: \"assets/[name].[hash][extname]\",\n        chunkFileNames: \"chunks/[name].[hash].js\",\n        entryFileNames: \"entries/[name].[hash].js\",\n      },\n    },\n  },\n});\n```\n\n### Service Worker (Future)\n```typescript\n// Future: Implement service worker for caching\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker.register(\"/sw.js\");\n}\n```\n\n## Performance Testing\n\n### Automated Performance Tests\n```typescript\n// tests/performance.spec.ts\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"should meet Core Web Vitals thresholds\", async ({ page }) => {\n  await page.goto(\"/\");\n  \n  const lcp = await page.evaluate(() => {\n    return new Promise((resolve) => {\n      new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        resolve(entries[entries.length - 1].startTime);\n      }).observe({ entryTypes: [\"largest-contentful-paint\"] });\n    });\n  });\n  \n  expect(lcp).toBeLessThan(2500); // 2.5 seconds\n});\n```","size_bytes":9630},"governance/routing-and-nav.md":{"content":"# Routing and Navigation\n\n## Routing Framework\n\n**Framework**: Wouter (lightweight React router)\n**Pattern**: File-based routing with centralized registration\n\n## Route Registration\n\nAll routes must be registered in `client/src/App.tsx`:\n\n```tsx\nimport { Switch, Route } from \"wouter\";\nimport Home from \"@/pages/home\";\nimport Product from \"@/pages/product\";\n// ... other imports\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/product\" component={Product} />\n      <Route path=\"/solutions\" component={Solutions} />\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/careers\" component={Careers} />\n      <Route path=\"/trust\" component={Trust} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n```\n\n## Page Component Structure\n\n### File Organization\n- All page components in `client/src/pages/`\n- One component per file\n- Default export with descriptive name\n\n```tsx\n// client/src/pages/pricing.tsx\nexport default function Pricing() {\n  return (\n    <div className=\"pt-16\">\n      {/* Page content */}\n    </div>\n  );\n}\n```\n\n### Page Wrapper Pattern\nAll pages should include top padding for fixed navigation:\n```tsx\n<div className=\"pt-16\"> {/* Accounts for fixed navigation */}\n  {/* Page content */}\n</div>\n```\n\n## Navigation Component\n\n### Navigation Structure\n- Fixed navigation at top of all pages\n- Consistent hover states and active indicators\n- Mobile-responsive design\n\n### Required Test IDs\nAll navigation links must include data-testid:\n```tsx\n<Link href=\"/\" data-testid=\"link-home\">Home</Link>\n<Link href=\"/product\" data-testid=\"link-product\">Product</Link>\n<Link href=\"/solutions\" data-testid=\"link-solutions\">Solutions</Link>\n<Link href=\"/pricing\" data-testid=\"link-pricing\">Pricing</Link>\n<Link href=\"/about\" data-testid=\"link-about\">About</Link>\n<Link href=\"/careers\" data-testid=\"link-careers\">Careers</Link>\n<Link href=\"/trust\" data-testid=\"link-trust\">Trust</Link>\n<Link href=\"/contact\" data-testid=\"link-contact\">Contact</Link>\n```\n\n### Active State Handling\nUse wouter's `useLocation` hook for active states:\n```tsx\nimport { useLocation } from \"wouter\";\n\nfunction Navigation() {\n  const [location] = useLocation();\n  \n  return (\n    <Link \n      href=\"/pricing\"\n      className={`${location === \"/pricing\" ? \"text-signal-teal\" : \"text-foreground\"} hover:text-signal-teal`}\n      data-testid=\"link-pricing\"\n    >\n      Pricing\n    </Link>\n  );\n}\n```\n\n## SEO Requirements\n\n### Page Titles\nEach page must have a unique, descriptive title:\n```tsx\n// In page component or layout\n<title>Pricing - DawsOS | Causal Analysis Platform</title>\n```\n\n### Meta Descriptions\nAll pages must include meta descriptions:\n```tsx\n<meta \n  name=\"description\" \n  content=\"Transparent pricing for DawsOS causal analysis platform. From rate hikes to rent defaults, trace every causal link with confidence.\" \n/>\n```\n\n### Open Graph Tags\nInclude Open Graph meta tags for social sharing:\n```tsx\n<meta property=\"og:title\" content=\"Pricing - DawsOS\" />\n<meta property=\"og:description\" content=\"Transparent pricing for DawsOS causal analysis platform.\" />\n<meta property=\"og:type\" content=\"website\" />\n```\n\n## Layout Structure\n\n### Global Layout\nConsistent layout wrapper for all pages:\n```tsx\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation />\n      <main className=\"flex-1\">\n        <Switch>\n          {/* Routes */}\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n```\n\n### Section Structure\nConsistent section patterns:\n```tsx\n<section className=\"py-16 bg-background\">\n  <div className=\"max-w-7xl mx-auto px-6\">\n    {/* Section content */}\n  </div>\n</section>\n```\n\n## Navigation Patterns\n\n### Link Usage\n- Use wouter's `Link` component for internal navigation\n- Use regular `<a>` tags for external links\n- Never use `window.location` or manual navigation\n\n```tsx\n// ✅ Correct\nimport { Link } from \"wouter\";\n<Link href=\"/pricing\">Pricing</Link>\n\n// ✅ External links\n<a href=\"https://external.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n  External Link\n</a>\n\n// ❌ Wrong\n<a href=\"/pricing\">Pricing</a> // Use Link instead\nwindow.location.href = \"/pricing\"; // Never use this\n```\n\n## Footer Component\n\n### Required Test IDs\nAll footer links must include data-testid:\n```tsx\n<Link href=\"/trust\" data-testid=\"footer-link-trust\">Trust</Link>\n<Link href=\"/contact\" data-testid=\"footer-link-contact\">Contact</Link>\n```\n\n### Footer Structure\nConsistent footer across all pages with:\n- Company information\n- Navigation links\n- Social links (if applicable)\n- Copyright information\n\n## Accessibility Requirements\n\n### Keyboard Navigation\n- All navigation elements must be keyboard accessible\n- Proper tab order throughout navigation\n- Focus indicators on all interactive elements\n\n### ARIA Labels\n```tsx\n<nav aria-label=\"Main navigation\">\n  {/* Navigation links */}\n</nav>\n\n<nav aria-label=\"Footer navigation\">\n  {/* Footer links */}\n</nav>\n```\n\n### Skip Links\nInclude skip navigation for accessibility:\n```tsx\n<a href=\"#main-content\" className=\"sr-only focus:not-sr-only\">\n  Skip to main content\n</a>\n```","size_bytes":5252},"governance/security-and-logging.md":{"content":"# Security and Logging\n\n## Security Practices\n\n### Input Validation\n\n#### Double Validation Pattern\n**Required**: Validate all inputs on both frontend and backend\n\n```tsx\n// Frontend validation (UX)\nconst formSchema = insertContactMessageSchema.extend({\n  email: z.string().email(\"Please enter a valid email address\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\n// Backend validation (Security)\nrouter.post(\"/contact-messages\", async (req, res) => {\n  try {\n    const validatedData = insertContactMessageSchema.parse(req.body);\n    // Process validated data\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({ error: \"Validation failed\", details: error.errors });\n    }\n  }\n});\n```\n\n#### SQL Injection Prevention\n**Required**: Use Drizzle ORM parameterized queries only\n\n```tsx\n// ✅ Safe: Drizzle ORM with parameters\nawait db.select().from(users).where(eq(users.email, userEmail));\n\n// ❌ Dangerous: Raw SQL with string concatenation\nawait db.execute(`SELECT * FROM users WHERE email = '${userEmail}'`);\n```\n\n### Authentication and Authorization\n\n#### Session Management\n```tsx\n// server/index.ts\nimport session from \"express-session\";\nimport ConnectPgSimple from \"connect-pg-simple\";\n\nconst pgSession = ConnectPgSimple(session);\n\napp.use(session({\n  store: new pgSession({\n    conString: process.env.DATABASE_URL,\n  }),\n  secret: process.env.SESSION_SECRET!,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === \"production\", // HTTPS only in production\n    httpOnly: true, // Prevent XSS\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: \"strict\", // CSRF protection\n  },\n}));\n```\n\n#### Environment Variables\n**Required**: Never expose sensitive data in frontend builds\n\n```tsx\n// ✅ Safe: Backend only\nconst apiKey = process.env.OPENAI_API_KEY;\n\n// ❌ Dangerous: Available in frontend\nconst apiKey = import.meta.env.VITE_OPENAI_API_KEY; // Don't do this with secrets\n```\n\n### CORS Configuration\n\n```tsx\n// server/index.ts\nimport cors from \"cors\";\n\napp.use(cors({\n  origin: process.env.NODE_ENV === \"production\" \n    ? [\"https://yourdomain.com\"] \n    : [\"http://localhost:5000\"],\n  credentials: true,\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  allowedHeaders: [\"Content-Type\", \"Authorization\"],\n}));\n```\n\n### Content Security Policy (CSP)\n\n```tsx\nimport helmet from \"helmet\";\n\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"], // Required for Tailwind\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\"],\n      fontSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      mediaSrc: [\"'self'\"],\n      frameSrc: [\"'none'\"],\n    },\n  },\n}));\n```\n\n## Logging Governance\n\n### Production Logging Rules\n\n#### Prohibited: PII Data Logging\n**CRITICAL**: Never log personally identifiable information in production\n\n```tsx\n// ❌ FORBIDDEN: Logging PII data\nconsole.log(\"User submitted:\", req.body); // Contains email, names, etc.\nlogger.info(\"Contact form data:\", formData); // Contains PII\n\n// ✅ Safe: Log non-PII metadata only\nconsole.log(\"Contact form submitted successfully\");\nlogger.info(\"Form submission\", { \n  endpoint: \"/api/contact-messages\",\n  timestamp: Date.now(),\n  success: true \n});\n```\n\n#### Current Security Issue\n**IMMEDIATE FIX REQUIRED**: Remove response body logging for API endpoints\n\n```tsx\n// Current problematic code in server/index.ts\nres.on(\"finish\", () => {\n  if (path.startsWith(\"/api\")) {\n    let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n    if (capturedJsonResponse) {\n      logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`; // ❌ LOGS PII\n    }\n    log(logLine);\n  }\n});\n\n// ✅ Fix: Remove response body logging\nres.on(\"finish\", () => {\n  if (path.startsWith(\"/api\")) {\n    log(`${req.method} ${path} ${res.statusCode} in ${duration}ms`);\n  }\n});\n```\n\n### Safe Logging Patterns\n\n#### Structured Logging\n```tsx\nimport winston from \"winston\";\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: \"error.log\", level: \"error\" }),\n    new winston.transports.File({ filename: \"combined.log\" }),\n  ],\n});\n\n// Production-safe logging\nlogger.info(\"API request\", {\n  method: req.method,\n  path: req.path,\n  statusCode: res.statusCode,\n  duration: Date.now() - start,\n  userAgent: req.get(\"User-Agent\"),\n  ip: req.ip,\n  // Never include: req.body, res.body, cookies, headers with auth\n});\n```\n\n#### Error Logging\n```tsx\n// Safe error logging\nlogger.error(\"Database error\", {\n  error: error.message,\n  stack: error.stack,\n  operation: \"createContactMessage\",\n  timestamp: Date.now(),\n  // Never include: user data, request bodies, auth tokens\n});\n\n// Redact sensitive information\nconst redactedBody = {\n  ...req.body,\n  email: req.body.email ? \"[REDACTED]\" : undefined,\n  password: req.body.password ? \"[REDACTED]\" : undefined,\n};\n```\n\n### Development vs Production\n\n#### Development Logging\n```tsx\nif (process.env.NODE_ENV === \"development\") {\n  logger.debug(\"Full request details\", {\n    method: req.method,\n    path: req.path,\n    body: req.body, // Only in development\n    headers: req.headers, // Only in development\n  });\n}\n```\n\n#### Production Safeguards\n```tsx\n// Environment-based logging configuration\nconst logLevel = process.env.NODE_ENV === \"production\" ? \"warn\" : \"debug\";\nconst includeBody = process.env.NODE_ENV !== \"production\";\n\nif (includeBody) {\n  logger.debug(\"Request body\", req.body);\n} else {\n  logger.info(\"Request processed\", { method: req.method, path: req.path });\n}\n```\n\n## Rate Limiting (Future)\n\n### API Rate Limiting\n```tsx\nimport rateLimit from \"express-rate-limit\";\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: \"Too many requests from this IP\",\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\napp.use(\"/api\", apiLimiter);\n\n// Stricter limits for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 5, // 5 login attempts per 15 minutes\n  skipSuccessfulRequests: true,\n});\n\napp.use(\"/api/auth\", authLimiter);\n```\n\n## Error Handling\n\n### Error Response Format\n```tsx\n// Standardized error responses\ninterface ErrorResponse {\n  error: string;\n  message?: string;\n  details?: any[];\n  timestamp: string;\n  requestId: string;\n}\n\n// Safe error handling\napp.use((err: any, req: Request, res: Response, next: NextFunction) => {\n  const requestId = req.headers[\"x-request-id\"] || crypto.randomUUID();\n  \n  // Log error safely (no PII)\n  logger.error(\"Request error\", {\n    requestId,\n    error: err.message,\n    stack: err.stack,\n    method: req.method,\n    path: req.path,\n    statusCode: err.status || 500,\n  });\n\n  // Return safe error response\n  const response: ErrorResponse = {\n    error: err.status < 500 ? err.message : \"Internal server error\",\n    timestamp: new Date().toISOString(),\n    requestId,\n  };\n\n  res.status(err.status || 500).json(response);\n});\n```\n\n### Security Headers\n\n```tsx\napp.use((req, res, next) => {\n  // Security headers\n  res.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n  res.setHeader(\"X-Frame-Options\", \"DENY\");\n  res.setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n  res.setHeader(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n  res.setHeader(\"Permissions-Policy\", \"geolocation=(), microphone=(), camera=()\");\n  \n  next();\n});\n```\n\n## Monitoring and Alerting\n\n### Health Checks\n```tsx\napp.get(\"/health\", (req, res) => {\n  res.json({\n    status: \"healthy\",\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    // Never include: database connections, secrets, user data\n  });\n});\n```\n\n### Security Incident Response\n1. Immediate containment of affected systems\n2. Assessment of data exposure (check logs for PII leakage)\n3. Notification procedures for data breaches\n4. Post-incident security review and improvements","size_bytes":8191},"governance/testing-and-accessibility.md":{"content":"# Testing and Accessibility\n\n## Data Test ID Standards\n\n### Required Test IDs\n**Mandatory**: Add `data-testid` to ALL interactive and meaningful elements\n\n### Naming Conventions\n\n#### Interactive Elements\nPattern: `{action}-{target}`\n```tsx\n// Buttons\n<button data-testid=\"button-submit\">Submit</button>\n<button data-testid=\"button-cancel\">Cancel</button>\n<button data-testid=\"button-book-demo\">Book Demo</button>\n<button data-testid=\"button-open-causal-path\">See Path</button>\n\n// Form inputs\n<input data-testid=\"input-email\" />\n<input data-testid=\"input-password\" />\n<select data-testid=\"select-role\" />\n<textarea data-testid=\"textarea-message\" />\n\n// Links\n<Link data-testid=\"link-home\">Home</Link>\n<Link data-testid=\"link-pricing\">Pricing</Link>\n<a data-testid=\"link-external-docs\">Documentation</a>\n```\n\n#### Display Elements\nPattern: `{type}-{content}`\n```tsx\n// Status and content\n<div data-testid=\"text-username\">{username}</div>\n<div data-testid=\"status-loading\">Loading...</div>\n<div data-testid=\"error-validation\">Invalid email</div>\n<img data-testid=\"img-avatar\" src={avatarUrl} />\n\n// Performance metrics\n<div data-testid=\"text-traversal-time\">8.3s</div>\n<div data-testid=\"text-alert-time\">1.8m</div>\n<div data-testid=\"text-calibration-ece\">0.03</div>\n```\n\n#### Dynamic Elements\nPattern: `{type}-{description}-{id}`\n```tsx\n// Lists and repeated components\n<Card data-testid={`card-product-${productId}`}>\n<div data-testid={`row-user-${index}`}>\n<button data-testid={`button-delete-${itemId}`}>\n```\n\n#### Navigation Elements\n```tsx\n// Main navigation\n<Link data-testid=\"link-home\" href=\"/\">Home</Link>\n<Link data-testid=\"link-product\" href=\"/product\">Product</Link>\n\n// Footer navigation\n<Link data-testid=\"footer-link-trust\" href=\"/trust\">Trust</Link>\n<Link data-testid=\"footer-link-contact\" href=\"/contact\">Contact</Link>\n```\n\n## Accessibility Requirements\n\n### Keyboard Navigation\n**Required**: All interactive elements must be keyboard accessible\n\n#### Focus Management\n```tsx\n// Proper focus indicators\nclassName=\"focus:ring-2 focus:ring-signal-teal focus:ring-offset-2 focus:ring-offset-background\"\n\n// Skip links for main content\n<a \n  href=\"#main-content\" \n  className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 z-50\"\n  data-testid=\"skip-to-content\"\n>\n  Skip to main content\n</a>\n```\n\n#### Tab Order\nEnsure logical tab order through interactive elements:\n1. Skip links\n2. Main navigation\n3. Page content (forms, buttons, links)\n4. Footer navigation\n\n### ARIA Labels and Roles\n\n#### Navigation\n```tsx\n<nav aria-label=\"Main navigation\" role=\"navigation\">\n  {/* Navigation items */}\n</nav>\n\n<nav aria-label=\"Footer navigation\" role=\"contentinfo\">\n  {/* Footer items */}\n</nav>\n```\n\n#### Interactive Elements\n```tsx\n// Buttons with descriptive labels\n<button \n  aria-label=\"Toggle dark mode\"\n  data-testid=\"button-theme-toggle\"\n>\n  <Moon className=\"h-5 w-5\" />\n</button>\n\n// Form inputs with proper labels\n<label htmlFor=\"email\">Email Address</label>\n<input \n  id=\"email\"\n  aria-describedby=\"email-error\"\n  data-testid=\"input-email\"\n/>\n<div id=\"email-error\" role=\"alert\">\n  {error && <span data-testid=\"error-email\">{error}</span>}\n</div>\n```\n\n#### Modal and Dialog Accessibility\n```tsx\n// Dialog with proper ARIA\n<Dialog open={isOpen} onOpenChange={setIsOpen}>\n  <DialogContent aria-labelledby=\"dialog-title\" aria-describedby=\"dialog-description\">\n    <DialogHeader>\n      <DialogTitle id=\"dialog-title\">Dialog Title</DialogTitle>\n      <DialogDescription id=\"dialog-description\">\n        Dialog description for screen readers\n      </DialogDescription>\n    </DialogHeader>\n    {/* Content */}\n  </DialogContent>\n</Dialog>\n```\n\n### Color and Contrast\n\n#### WCAG AA Compliance\n- Text contrast ratio: minimum 4.5:1\n- Large text contrast ratio: minimum 3:1\n- Interactive element contrast: minimum 3:1\n\n#### Color Independence\nDon't rely solely on color to convey information:\n```tsx\n// ✅ Good: Color + icon + text\n<div className=\"text-green-600 dark:text-green-400\">\n  <CheckIcon className=\"w-4 h-4 inline mr-1\" />\n  Success: Operation completed\n</div>\n\n// ❌ Bad: Color only\n<div className=\"text-green-600\">Operation completed</div>\n```\n\n### Screen Reader Support\n\n#### Semantic HTML\nUse proper HTML elements:\n```tsx\n// ✅ Good: Semantic elements\n<main>\n  <section>\n    <h2>Section Title</h2>\n    <article>Content</article>\n  </section>\n</main>\n\n// ❌ Bad: Generic divs\n<div>\n  <div>Section Title</div>\n  <div>Content</div>\n</div>\n```\n\n#### Hidden Content for Screen Readers\n```tsx\n<span className=\"sr-only\">\n  Screen reader only content\n</span>\n\n<span aria-hidden=\"true\">\n  Content hidden from screen readers\n</span>\n```\n\n## Testing Patterns\n\n### E2E Testing Guidelines\nUse Playwright for end-to-end testing with consistent patterns:\n\n```typescript\n// Navigation testing\nawait page.click('[data-testid=\"link-pricing\"]');\nawait expect(page).toHaveURL('/pricing');\n\n// Form interaction testing\nawait page.fill('[data-testid=\"input-email\"]', 'test@example.com');\nawait page.selectOption('[data-testid=\"select-role\"]', 'developer');\nawait page.click('[data-testid=\"button-submit\"]');\n\n// Modal testing\nawait page.click('[data-testid=\"button-book-demo\"]');\nawait expect(page.locator('[data-testid=\"modal-demo\"]')).toBeVisible();\n```\n\n### Accessibility Testing\nInclude a11y checks in test suite:\n\n```typescript\n// Keyboard navigation test\nawait page.keyboard.press('Tab');\nawait expect(page.locator('[data-testid=\"link-home\"]')).toBeFocused();\n\n// Screen reader content test\nawait expect(page.locator('.sr-only')).toContainText('Skip to main content');\n\n// Color contrast validation\n// Use automated tools like axe-playwright\n```\n\n### Loading State Testing\n```typescript\n// Loading indicators\nawait expect(page.locator('[data-testid=\"status-loading\"]')).toBeVisible();\nawait expect(page.locator('[data-testid=\"status-loading\"]')).toBeHidden();\n\n// Button loading states\nawait page.click('[data-testid=\"button-submit\"]');\nawait expect(page.locator('[data-testid=\"button-submit\"]')).toContainText('Submitting...');\n```\n\n## Form Accessibility\n\n### Label Association\n```tsx\n// Explicit labels\n<label htmlFor=\"email-input\">Email Address</label>\n<input id=\"email-input\" data-testid=\"input-email\" />\n\n// Or with implicit labels\n<label>\n  Email Address\n  <input data-testid=\"input-email\" />\n</label>\n```\n\n### Error Handling\n```tsx\n<input \n  aria-invalid={hasError}\n  aria-describedby={hasError ? \"email-error\" : undefined}\n  data-testid=\"input-email\"\n/>\n{hasError && (\n  <div id=\"email-error\" role=\"alert\" data-testid=\"error-email\">\n    Please enter a valid email address\n  </div>\n)}\n```\n\n### Required Fields\n```tsx\n<label htmlFor=\"email\">\n  Email Address <span aria-label=\"required\">*</span>\n</label>\n<input \n  id=\"email\"\n  required\n  aria-required=\"true\"\n  data-testid=\"input-email\"\n/>\n```\n\n## Performance Testing\n\n### Core Web Vitals\nMonitor and test for:\n- Largest Contentful Paint (LCP) < 2.5s\n- First Input Delay (FID) < 100ms\n- Cumulative Layout Shift (CLS) < 0.1\n\n### Loading Performance\n```typescript\n// Test performance metrics\nconst performanceMetrics = await page.evaluate(() => ({\n  traversalTime: document.querySelector('[data-testid=\"text-traversal-time\"]')?.textContent,\n  alertTime: document.querySelector('[data-testid=\"text-alert-time\"]')?.textContent,\n  calibrationEce: document.querySelector('[data-testid=\"text-calibration-ece\"]')?.textContent,\n}));\n\nexpect(performanceMetrics.traversalTime).toBe('8.3s');\n```\n\n## Test Organization\n\n### Test File Structure\n```\ntests/\n├── e2e/\n│   ├── navigation.spec.ts\n│   ├── forms.spec.ts\n│   ├── accessibility.spec.ts\n│   └── performance.spec.ts\n├── unit/\n│   ├── components/\n│   └── utils/\n└── integration/\n    ├── api/\n    └── database/\n```\n\n### Test Naming\nUse descriptive test names that include user actions:\n```typescript\ntest('should open demo modal when clicking book demo button');\ntest('should navigate to pricing page when clicking pricing link');\ntest('should submit contact form with valid data');\ntest('should show validation error for invalid email format');\n```","size_bytes":8146},"governance/theming.md":{"content":"# Theming and Dark Mode\n\n## Dark Mode Implementation\n\n**Framework**: Tailwind CSS with class-based dark mode\n**Configuration**: `darkMode: [\"class\"]` in `tailwind.config.ts`\n**Provider**: Required ThemeProvider component for state management\n\n## Theme Provider Implementation\n\n**Required**: Implement centralized theme management:\n\n```tsx\n// client/src/components/theme-provider.tsx\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first, fallback to system preference\n    const saved = localStorage.getItem(\"dawsos-theme\");\n    if (saved === \"light\" || saved === \"dark\") return saved;\n    \n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    // Apply theme to document\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    \n    // Save to localStorage\n    localStorage.setItem(\"dawsos-theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n```\n\n## CSS Variable System\n\n### Color Variable Definitions\nDefine all colors as CSS variables in `client/src/index.css`:\n\n```css\n:root {\n  /* Base colors */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  \n  /* Brand colors */\n  --graphite: hsl(220, 10%, 20%);\n  --slate: hsl(220, 10%, 25%);\n  --signal-teal: hsl(180, 100%, 35%);\n  --electric-blue: hsl(210, 100%, 50%);\n  --provenance-purple: hsl(270, 75%, 60%);\n  --alert-amber: hsl(45, 100%, 50%);\n  --risk-red: hsl(0, 75%, 55%);\n}\n\n.dark {\n  /* Dark mode overrides */\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  \n  /* Brand colors may need dark variants */\n  --signal-teal: hsl(180, 100%, 40%);\n  --electric-blue: hsl(210, 100%, 60%);\n}\n```\n\n## Required Class Patterns\n\n### Explicit Light/Dark Variants\n**Required**: All visual properties must have explicit light and dark variants:\n\n```tsx\n// ✅ Correct - Explicit variants\nclassName=\"bg-white dark:bg-gray-900 text-gray-900 dark:text-white\"\nclassName=\"border-gray-200 dark:border-gray-700\"\nclassName=\"hover:bg-gray-100 dark:hover:bg-gray-800\"\n\n// ❌ Wrong - Missing dark mode\nclassName=\"bg-white text-gray-900\" // Will break in dark mode\nclassName=\"text-black\" // Hard-coded colors\n```\n\n### Brand Color Usage\nUse CSS variables for consistent brand colors:\n\n```tsx\n// ✅ Correct - CSS variables\nclassName=\"bg-signal-teal text-white\"\nclassName=\"border-electric-blue\"\nclassName=\"text-provenance-purple\"\n\n// ❌ Wrong - Hard-coded colors\nclassName=\"bg-teal-500\" // Use brand variables instead\n```\n\n## Component Integration\n\n### Theme Toggle Button\nImplement theme toggle in navigation:\n\n```tsx\nimport { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"text-foreground\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n```\n\n### App Integration\nWrap entire app with ThemeProvider:\n\n```tsx\n// client/src/App.tsx\nimport { ThemeProvider } from \"@/components/theme-provider\";\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n```\n\n## Accessibility Requirements\n\n### System Preference Detection\nRespect user's system preference:\n```tsx\nconst systemPreference = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n```\n\n### Smooth Transitions\nAdd transitions for theme changes:\n```css\nhtml {\n  transition: background-color 0.2s ease, color 0.2s ease;\n}\n```\n\n### Focus Indicators\nEnsure focus indicators work in both themes:\n```tsx\nclassName=\"focus:ring-2 focus:ring-signal-teal focus:ring-offset-2 focus:ring-offset-background\"\n```\n\n## Testing Considerations\n\n### Data Test IDs\nTheme toggle must include test ID:\n```tsx\n<Button data-testid=\"button-theme-toggle\">\n```\n\n### Local Storage Key\nUse consistent localStorage key: `dawsos-theme`\n\n### Theme Persistence\nTheme choice must persist across page reloads and browser sessions.\n\n## Performance Optimization\n\n### CSS Custom Properties\nUse CSS custom properties for dynamic theming without JavaScript:\n```css\n.component {\n  color: var(--foreground);\n  background-color: var(--background);\n}\n```\n\n### Minimal JavaScript\nTheme switching should be lightweight and not cause layout shifts.\n\n## Common Patterns\n\n### Card Components\n```tsx\n<Card className=\"bg-card dark:bg-card text-card-foreground border-border\">\n```\n\n### Interactive Elements\n```tsx\n<button className=\"bg-primary hover:bg-primary/90 text-primary-foreground\">\n```\n\n### Status Indicators\n```tsx\n<div className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\">\n```\n\n## Migration Strategy\n\n1. Implement ThemeProvider in App.tsx\n2. Add theme toggle to navigation\n3. Audit all components for missing dark mode classes\n4. Test all interactive states in both themes\n5. Validate accessibility in both modes","size_bytes":6470},"governance/ui-patterns.md":{"content":"# UI Patterns and Design System\n\n## Design System Foundation\n\n### Core Libraries\n- **shadcn/ui**: Primary component library\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **Framer Motion**: Animation library\n\n### Color System\nCustom brand colors defined in `client/src/index.css`:\n- `--graphite`: Primary dark background\n- `--slate`: Secondary dark background  \n- `--signal-teal`: Primary brand color\n- `--electric-blue`: Secondary accent\n- `--provenance-purple`: Tertiary accent\n- `--alert-amber`: Warning/attention color\n- `--risk-red`: Error/danger color\n\n## Component Usage Standards\n\n### Modal and Dialog Patterns\n**Required**: Use shadcn/ui `Dialog` component for all modal interactions\n**Forbidden**: `window.alert()`, `window.confirm()`, or custom modal implementations\n\n```tsx\n// ✅ Correct\n<Dialog open={isOpen} onOpenChange={setIsOpen}>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Title</DialogTitle>\n    </DialogHeader>\n    {/* Content */}\n  </DialogContent>\n</Dialog>\n\n// ❌ Wrong\nalert(\"Message\"); // Never use browser alerts\n```\n\n### Button Patterns\nUse shadcn/ui `Button` component with consistent variants:\n- Primary actions: `bg-signal-teal hover:bg-signal-teal/90`\n- Secondary actions: `border-2 border-electric-blue text-electric-blue hover:bg-electric-blue hover:text-white`\n- Text buttons: `text-{color} hover:underline`\n\n### Card Patterns\nUse shadcn/ui `Card` component for content grouping:\n```tsx\n<Card className=\"bg-card border border-muted rounded-xl p-6\">\n  {/* Content */}\n</Card>\n```\n\n## Data Test IDs\n\n**Required**: Add `data-testid` to ALL interactive and meaningful elements\n\n### Naming Convention\n- Interactive elements: `{action}-{target}` (e.g., `button-submit`, `input-email`)\n- Display elements: `{type}-{content}` (e.g., `text-username`, `status-payment`)\n- Dynamic elements: `{type}-{description}-{id}` (e.g., `card-product-${productId}`)\n\n### Examples\n```tsx\n// Buttons\n<button data-testid=\"button-book-demo\">Book Demo</button>\n<button data-testid=\"button-open-causal-path\">See Path</button>\n\n// Inputs\n<input data-testid=\"input-email\" />\n<select data-testid=\"select-role\" />\n\n// Navigation\n<Link data-testid=\"link-home\">Home</Link>\n<Link data-testid=\"link-pricing\">Pricing</Link>\n\n// Content\n<div data-testid=\"text-username\">{username}</div>\n<div data-testid=\"status-loading\">Loading...</div>\n```\n\n## Component File Organization\n\n### Minimize Files\nCollapse similar components into single files when possible:\n```tsx\n// ✅ Good: Multiple related components in one file\nexport function PricingCard() { /* */ }\nexport function PricingTier() { /* */ }\nexport function PricingFeature() { /* */ }\n\n// ❌ Avoid: Separate files for tightly coupled components\n```\n\n### Import Patterns\nUse consistent import patterns:\n```tsx\n// shadcn/ui components\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\n// Icons\nimport { ArrowRight, Shield } from \"lucide-react\";\n\n// Assets (when needed)\nimport logoPath from \"@assets/logo.png\";\n```\n\n## Unused Component Cleanup\n\nRegularly audit and remove unused shadcn/ui components to reduce bundle size and cognitive load:\n\n1. Review `package.json` for unused @radix-ui packages\n2. Check `components/ui/` folder for unused components\n3. Remove imports and files that aren't referenced\n4. Update this document when removing/adding components\n\n## Dark Mode Implementation\n\n**Required**: Use explicit light/dark variants for ALL visual properties:\n```tsx\n// ✅ Correct\nclassName=\"bg-white dark:bg-black text-black dark:text-white\"\n\n// ❌ Wrong\nclassName=\"bg-white text-black\" // Missing dark mode variants\n```\n\n## Accessibility Requirements\n\n- All interactive elements must be keyboard accessible\n- Proper ARIA labels for complex components\n- Color contrast ratios must meet WCAG AA standards\n- Focus indicators must be visible and consistent","size_bytes":3904},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first, fallback to system preference\n    const saved = localStorage.getItem(\"dawsos-theme\");\n    if (saved === \"light\" || saved === \"dark\") return saved;\n    \n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    // Apply theme to document\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    \n    // Save to localStorage\n    localStorage.setItem(\"dawsos-theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}","size_bytes":1417},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\nimport { Button } from \"./ui/button\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"text-foreground hover:bg-muted/10\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":588}},"version":1}